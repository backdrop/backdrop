<?php
/**
 * @file
 * Entity CRUD API tests.
 */

/**
 * Tests the basic Entity API.
 */
class EntityAPITestCase extends BackdropWebTestCase {
  function setUp() {
    parent::setUp('entity', 'entity_test');
  }

  /**
   * Tests basic CRUD functionality of the Entity API.
   */
  function testCRUD() {
    $user1 = $this->backdropCreateUser();

    // Create some test entities.
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => $user1->uid));
    $entity->save();
    $entity = entity_create('entity_test', array('name' => 'test2', 'uid' => $user1->uid));
    $entity->save();
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => NULL));
    $entity->save();

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test')));

    $this->assertEqual($entities[0]->name, 'test', 'Created and loaded entity.');
    $this->assertEqual($entities[1]->name, 'test', 'Created and loaded entity.');

    // Test loading a single entity.
    $loaded_entity = entity_test_load($entity->id);
    $this->assertEqual($loaded_entity->id, $entity->id, 'Loaded a single entity by id.');

    // Test deleting an entity.
    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $entities[0]->delete();
    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $this->assertEqual($entities, array(), 'Entity deleted.');

    // Test updating an entity.
    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test')));
    $entities[0]->name = 'test3';
    $entities[0]->save();
    $entity = entity_test_load($entities[0]->id);
    $this->assertEqual($entity->name, 'test3', 'Entity updated.');

    // Try deleting multiple test entities by deleting all.
    $ids = array_keys(entity_test_load_multiple(FALSE));
    entity_test_delete_multiple($ids);

    $all = entity_test_load_multiple(FALSE);
    $this->assertTrue(empty($all), 'Deleted all entities.');
  }

  /**
   * Tests caching (and not caching) of entities in the Entity API.
   */
  function testCaching() {
    module_enable(array('entity_caching_test'));

    $user1 = $this->backdropCreateUser();

    // Create an entity that is cached.
    $entity = entity_create('test_cacheable', array('name' => 'cache_this', 'uid' => $user1->uid));
    $entity->save();
    $loaded_entity = entity_load('test_cacheable', $entity->id);
    $ids = array($entity->id);
    $data = cache_get_multiple($ids, 'cache_entity_test_cacheable');
    $this->assertTrue(!empty($data), "Entity 'test_cacheable' is cached.");

    // Create an entity whose caching has been disabled.
    $entity = entity_create('test_disable_cache', array('name' => 'disable_cache', 'uid' => $user1->uid));
    $entity->save();
    $loaded_entity = entity_load('test_disable_cache', $entity->id);
    $ids = array($entity->id);
    $data = cache_get_multiple($ids, 'cache_entity_test_disable_cache');
    $this->assertTrue(empty($data), "Entity 'test_disable_cache' is not cached.");

    // Create an entity/bundle that is cached.
    $entity = entity_create('test_multibundle', array('type' => 'docache', 'name' => 'bundle_cached', 'uid' => $user1->uid));
    $entity->save();
    $loaded_entity = entity_load('test_multibundle', $entity->id);
    $ids = array($entity->id);
    $data = cache_get_multiple($ids, 'cache_entity_test_multibundle');
    $this->assertTrue(!empty($data), "Entity 'test_multibundle' of type 'docache' is cached.");

    // Create an entity/bundle that is not cached.
    $entity = entity_create('test_multibundle', array('type' => 'nocache', 'name' => 'bundle_not_cached', 'uid' => $user1->uid));
    $entity->save();
    $loaded_entity = entity_load('test_multibundle', $entity->id);
    $ids = array($entity->id);
    $data = cache_get_multiple($ids, 'cache_entity_test_multibundle');
    $this->assertTrue(empty($data), "Entity 'test_multibundle' of type 'nocache' is not cached.");
  }

  /**
   * Tests basic View functionality of the Entity API.
   */
  function testEntityView() {
    $user1 = $this->backdropCreateUser();

    // Create a test entity.
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => $user1->uid));
    $entity->field_test_text[LANGUAGE_NONE][0]['value'] = 'Some random text';
    $entity->save();

    $this->backdropGet('test/' . $entity->id());
    $this->assertRaw('<h1 class="page-title">Entity test</h1>');
    $this->assertText('Some random text', 'Found the field text on the rendered entity.');
  }
}

/**
 * Tests that entity_access returns same values as the individual access checks.
 */
class EntityAccessTestCase extends BackdropWebTestCase {
  protected $profile = 'testing';

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Basic setup for the "testing" profile.
    config_set('system.core', 'site_frontpage', 'node');
    user_role_grant_permissions(BACKDROP_ANONYMOUS_ROLE, array('access content'));
    user_role_grant_permissions(BACKDROP_AUTHENTICATED_ROLE, array('access content'));
    $this->backdropCreateContentType(array('type' => 'page', 'name' => 'Page'));
    $this->backdropCreateContentType(array('type' => 'post', 'name' => 'Post'));
  }

  /**
   * Test that entity_access returns same results as node_access.
   */
  public function testNodeEntityAccess() {
    $users = array(
      'anonymous' => user_load(0),
      'unprivileged' => $this->backdropCreateUser(array(
        'create post content',
      )),
      'privileged' => $this->backdropCreateUser(array(
        'create post content',
        'create page content',
        'edit any post content',
        'edit any page content',
      )),
      'admin' => $this->backdropCreateUser(array(
        'bypass node access',
      )),
    );

    $nodes = array(
      'page' => $this->backdropCreateNode(array('type' => 'page')),
      'post' => $this->backdropCreateNode(array('type' => 'post')),
    );

    $node_checks = array(
      'page' => array(
        'create',
        'view',
        'update',
        'delete',
      ),
      'post' => array(
        'create',
        'view',
        'update',
        'delete',
      ),
    );

    // When a node entity is provided, the access results must be the same.
    foreach ($users as $privilege => $account) {
      foreach ($node_checks as $type => $operations) {
        foreach ($operations as $op) {
          $node_access = node_access($op, $nodes[$type], $account);
          $entity_access = entity_access($op, 'node', $nodes[$type], $account);
          $this->assertEqual($entity_access, $node_access, format_string('Same result for @priv user when node entity provided: @op @type -> @result', array(
            '@priv' => $privilege,
            '@op' => $op,
            '@type' => $type,
            '@result' => $entity_access ? 'true' : 'false',
          )));
        }
      }
    }

    // When no node entity is available, things are trickier, because the
    // entity module has to do its check in an abstract way. In Function
    // node_access the entity is not optional, in function entity_access it is.
    foreach ($users as $privilege => $account) {
      foreach ($node_checks as $type => $operations) {
        foreach ($operations as $op) {
          // We can not run node_access without node or node type. To simulate
          // an abstract check, we run it on both nodes.
          $node_access = node_access($op, $nodes['page'], $account) && node_access($op, $nodes['post'], $account);
          $entity_access = entity_access($op, 'node', NULL, $account);
          $this->assertEqual($entity_access, $node_access, format_string('Same result for @priv user when no node provided: @op @type -> @result', array(
            '@priv' => $privilege,
            '@op' => $op,
            '@type' => $type,
            '@result' => $entity_access ? 'true' : 'false',
          )));
        }
      }
    }
  }

}

/**
 * Tests Entity API base functionality.
 */
class EntityAPIInfoTestCase extends BackdropWebTestCase  {
  /**
   * Ensures entity info cache is updated after changes.
   */
  function testEntityInfoChanges() {
    module_enable(array('entity_cache_test'));
    $entity_info = entity_get_info();
    $this->assertTrue(isset($entity_info['entity_cache_test']), 'Test entity type found.');

    // Change the label of the test entity type and make sure changes appear
    // after flushing caches.
    state_set('entity_cache_test_label', 'New label.');
    backdrop_flush_all_caches();
    $info = entity_get_info('entity_cache_test');
    $this->assertEqual($info['label'], 'New label.', 'New label appears in entity info.');

    // Disable the providing module and make sure the entity type is gone.
    module_disable(array('entity_cache_test', 'entity_cache_test_dependency'));
    $entity_info = entity_get_info();
    $this->assertFalse(isset($entity_info['entity_cache_test']), 'Entity type of the providing module is gone.');
  }

  /**
   * Tests entity info cache after enabling a module with a dependency on an entity providing module.
   *
   * @see entity_cache_test_watchdog()
   */
  function testEntityInfoCacheWatchdog() {
    module_enable(array('entity_cache_test'));
    $info = state_get('entity_cache_test');
    $this->assertEqual($info['label'], 'Entity Cache Test', 'Entity info label is correct.');
    $this->assertEqual($info['controller class'], 'DefaultEntityController', 'Entity controller class info is correct.');
  }
}
