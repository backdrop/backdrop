<?php
/**
 * @file
 * Test file for Field Group UI.
 */

require_once BACKDROP_ROOT . '/core/modules/field_group/tests/field_group.test';

/**
 * Test the Field Group UI.
 */
class FieldGroupUITestCase extends FieldGroupTestCase {

  function setUp() {
    parent::setUp();
  }

  /**
   * Test the creation a group on the post content type.
   */
  function createGroup() {

    // Create random group name.
    $this->group_label = $this->randomName(8);
    $this->group_name_input = backdrop_strtolower($this->randomName(8));
    $this->group_name = 'group_' . $this->group_name_input;

    // Setup new group.
    $group = array(
      'fields[_add_new_group][label]' => $this->group_label,
      'fields[_add_new_group][group_name]' => $this->group_name_input,
    );
    // Add new group on the 'Manage fields' page.
    $this->backdropPost('admin/structure/types/manage/post/fields', $group, 'Save');

    $this->assertRaw(format_string('New group %label successfully created.', array('%label' => $this->group_label)), 'Group message displayed on screen.');

    // Test if group is in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'form', TRUE);
    $this->assertTrue(array_key_exists($this->group_name, $groups), 'Group found in groups array');

    // Add new group on the 'Manage display' page.
    $this->backdropPost('admin/structure/types/manage/post/display/default', $group, 'Save');
    $this->assertRaw(format_string('New group %label successfully created.', array('%label' => $this->group_label)), 'Group message displayed on screen.');

    // Test if group is in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->assertTrue(array_key_exists($this->group_name, $groups), 'Group found in groups array');
  }

  /**
   * Delete a group.
   */
  function deleteGroup() {

    $this->backdropPost('admin/structure/types/manage/post/groups/' . $this->group_name . '/delete/form', array(), 'Delete');
    $this->assertRaw(format_string('The group %label has been deleted from the %post content type.', array('%label' => $this->group_label, '%post' => 'Post')), 'Group removal message displayed on screen.');

    // Test that group is not in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'form', TRUE);
    $this->assertFalse(array_key_exists($this->group_name, $groups), 'Group not found in groups array while deleting');

    $this->backdropPost('admin/structure/types/manage/post/groups/' . $this->group_name . '/delete/default', array(), 'Delete');
    $this->assertRaw(format_string('The group %label has been deleted from the %post content type.', array('%label' => $this->group_label, '%post' => 'Post')), 'Group removal message displayed on screen.');

    // Test that group is not in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->assertFalse(array_key_exists($this->group_name, $groups), 'Group not found in groups array while deleting');
  }

  /**
   * General CRUD.
   */
  function testCRUDGroup() {
    $this->createGroup();
    $this->deleteGroup();
  }

  /**
   * Nest a field underneath a group.
   */
  function testNestField() {

    $this->createGroup();

    $edit = array(
      'fields[field_image][parent]' => $this->group_name,
    );
    $this->backdropPost('admin/structure/types/manage/post/fields', $edit, 'Save');
    $this->assertRaw('Your settings have been saved.', 'Settings saved');

    $groups = field_group_info_groups('node', 'post', 'form', TRUE);
    $this->assertTrue(in_array('field_image', $groups[$this->group_name]->children), format_string('Image is a child of %group', array('%group' => $this->group_name)));
  }

}
