<?php
/**
* Administration tests for Project Browser.
*/
class ProjectBrowserAdministrationTestCase extends BackdropWebTestCase {
  protected $privileged_user;

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array (
      'name' => t('Project Browser Install Project Test'),
      'description' => t('Attempts to install a project.'),
      'group' => t('Project Browser'),
    );
  }

  public function setUp() {
    parent::setUp('update', 'installer_browser_test');  // Enable any modules required for the test

    // Set the default server variable
    $server_url = url('installer_browser_test', array('absolute' => TRUE));
    config_set('update.settings', 'installer_browser_server', array(
      'url' => $server_url,
      'name' => 'Test Server',
      'method' => 'json',
    ));

    // Create and log in our privileged user.
    $this->privileged_user = $this->backdropCreateUser(array(
      'use project browser',
      'administer site configuration',
      'administer modules',
      'access site in maintenance mode',
    ));
    $this->backdropLogin($this->privileged_user);
  }

  public function testProjectBrowserProjects() {
    // Attempt to fetch the default projects
    $edit = array();
    $edit['search_text'] = '';
    $this->backdropPost('admin/modules/installer-browser/modules', $edit, t('Filter'));
    $this->assertText(t('Showing 1 to'), 'Module browser loaded');

    $edit = array();
    $edit['search_text'] = '';
    $this->backdropPost('admin/modules/installer-browser/themes', $edit, t('Filter'));
    $this->assertText(t('Showing 1 to'), 'Theme browser loaded');

    $edit = array();
    $edit['search_text'] = '';
    $this->backdropPost('admin/modules/installer-browser/layouts', $edit, t('Filter'));
    $this->assertText(t('Showing 1 to'), 'Layout browser loaded');
    }

  public function testProjectBrowserSearch() {
    // Test searching for a project by name.
    $edit = array();
    $edit['search_text'] = 'aaa';
    $this->backdropPost('admin/modules/installer-browser/modules', $edit, t('Filter'));
    $this->assertText('Showing 1 to');
  }

  public function testProjectBrowserProjectEnabled() {
    // Make sure project enabled detection works
    module_load_include('inc', 'installer', 'installer.browser');
    $this->assertTrue(_installer_browser_is_project_enabled('module', 'update'), t('Make sure project enabled detection works.'));
  }

  public function testProjectBrowserAddRemoveQueue() {
    // Refresh the page
    $this->backdropGet('admin/modules/installer-browser/modules');

    // Simulate adding a project to the install queue
    $this->backdropGet('admin/installer-browser/nojs/install-queue/add/ddd_update_test', array('query' => array('destination' => 'admin/modules/installer-browser')));
    $this->assertNoText('Install queue is empty.');
    $this->assertNoText('Error: The project was not found.');

    // Simulate removing a project from the install queue
    $this->backdropGet('admin/installer-browser/nojs/install-queue/remove/ddd_update_test', array('query' => array('destination' => 'admin/modules/installer-browser')));
    $this->assertText('Install queue is empty.');
    $this->assertNoText('Error: The project was not found.');
  }

  public function testProjectBrowserInstallPage() {
    // Refresh the page
    $this->backdropGet('admin/modules/installer-browser/modules');
    $module_one = 'ddd_update_test';
    $module_two = 'eee_update_test';

    // Attempt to install a project
    $this->backdropGet('admin/installer-browser/nojs/install-queue/add/' . $module_one, array('query' => array('destination' => 'admin/modules/installer-browser')));
    $this->backdropGet('admin/installer-browser/nojs/install-queue/add/' . $module_two, array('query' => array('destination' => 'admin/modules/installer-browser')));
    $this->backdropPost('admin/modules/installer-browser/modules', array(), t('Install'));
    
    // Check that this is the install page
    $this->assertText("You're about to install");
    
    // Check that two projects are listed for install and the recommended
    // version is shown.
    $module_one_data = $this->getProjectData($module_one);
    $this->assertText($module_one_data['title'] . ' ' . $module_one_data['recommended']);
    $module_two_data = $this->getProjectData($module_two);
    $this->assertText($module_two_data['title'] . ' ' . $module_two_data['recommended']);
    
    // Check that two versions of EEE Update test are listed
    $releases = $this->xpath('//div[contains(@class, "installer-browser-releases-radios")]//div[contains(@class, "form-item-releases-eee-update-test-release-name")]');
    $this->assertEqual(count($releases), 2, 'Two releases available for EEE Update test.');  
    
    // Cancel and go back to project list
    $this->backdropGet('admin/modules/installer-browser/reset');

    // Check project installs
    $this->backdropGet('admin/installer-browser/nojs/install-queue/add/' . $module_one, array('query' => array('destination' => 'admin/modules/installer-browser')));
    $this->backdropPost('admin/modules/installer-browser/modules', array(), t('Install'));

    // Check that this is the install page
    $this->assertText("You're about to install");

    // Set maintenance mode off
    $edit = array(
      // Cannot test in maintenance mode, as the HTTP request to fetch projects
      // always will fail since we are fetching from the (now offline) site 
      // itself.
      'maintenance_mode' => FALSE,
    );
    $this->backdropPost(NULL, $edit, t('Install'));

    // Check that dependencies install page loaded with the recommended
    // dependency selected.
    $dependencies_page = $this->xpath('//h1[contains(@class, "page-title") and normalize-space(text()) = "Install Dependencies"]');
    $this->assertTrue($dependencies_page, 'The Install Dependencies page was loaded');
    $this->assertText($module_two . ' ' . $module_two_data['recommended']);
    
    // Test that the test module was really downloaded
    $this->assertTrue(file_exists('modules/' . $module_one), $module_one_data['title'] . ' exists in the modules directory');
    
    // Test that project two installs
    $this->backdropPost(NULL, $edit, t('Install'));
    
    // Check that enable page loaded.
    $dependencies_page = $this->xpath('//h1[contains(@class, "page-title") and normalize-space(text()) = "Enable modules"]');
    $this->assertTrue($dependencies_page, 'The Enable modules page was loaded');
    
    // Test that the test module was really downloaded
    $this->assertTrue(file_exists('modules/' . $module_two), $module_two_data['title'] . ' exists in the modules directory');
    
    // Enable both modules
    $edit = array(
      'modules[ddd_update_test]' => TRUE,
      'modules[eee_update_test]' => TRUE,
    );
    $this->backdropPost(NULL, $edit, t('Enable modules'));
    $this->resetAll();
    $this->assertTrue(module_exists($module_one), $module_one_data['title'] . ' was enabled.');
    $this->assertTrue(module_exists($module_two), $module_two_data['title'] . ' was enabled.');
    
    // Delete the test module files
    foreach (array('ddd_update_test', 'eee_update_test') as $test_module) {
      $directory = backdrop_get_path('module', $test_module);
      $this->assertTrue(file_unmanaged_delete_recursive($directory), 'Deleted test module.');
    }
  }

  /**
   * Get the recommended version for a given project.
   *
   * @param $test_module
   *   The test module.
   *
   * @return
   *   The recommended version.
   */
  protected function getProjectData($test_module) {
    module_load_include('inc', 'installer', 'installer.browser');
    module_load_include('inc', 'update', 'update.compare');
    // Build the filters.
    $backdrop_version = explode('.', BACKDROP_CORE_COMPATIBILITY);
    $filters = array(
      'version' => $backdrop_version[0],
      'type' => 'module',
    );
    $results = installer_browser_fetch_results($filters);
    $release_data = installer_browser_get_project_release_data($results['projects'][$test_module]);
    $project_data = array(
      'existing_major' => 0,
      'existing_version' => 0,
      'install_type' => '',
    );
    update_calculate_project_update_status($project_data, $release_data);
    return $project_data;
  }

}
?>