<?php
/**
 * @file
 * Tests for the Layout module.
 */

/**
 * Tests the interface for adding, removing, and moving blocks.
 */
class LayoutFlexibleTemplateTest extends BackdropWebTestCase {
  protected $profile = 'minimal';
  protected $admin_user;
  protected $web_user;
  protected $test_node1;
  protected $test_node2;

  function setUp() {
    parent::setUp('layout', 'layout_test');

    // Create and login admin user.
    $this->admin_user = $this->backdropCreateUser(array(
      'access administration pages',
      'administer site configuration',
      'administer modules',
      'administer layouts',
      'administer nodes',
    ));
    $this->backdropLogin($this->admin_user);

    // Create a web user.
    $this->web_user = $this->backdropCreateUser(array(
      'access user profiles',
      'access content'
    ));

    // Create content types for testing.
    $this->backdropCreateContentType(array('type' => 'page', 'name' => 'Page'));
    $this->backdropCreateContentType(array('type' => 'post', 'name' => 'Post'));

    $this->test_node1 = $this->backdropCreateNode(array(
      'type' => 'post',
      'title' => $this->randomString(),
    ));
    $this->test_node2 = $this->backdropCreateNode(array(
      'type' => 'page',
      'title' => $this->randomString(),
    ));
  }

  /**
   * Test that layout templates may be enabled and disabled.
   */
  function testLayoutFlexibleTemplates() {
    $this->backdropGet('admin/structure/layouts/settings');
    $this->clickLink(t('Add flexible layout template'));

    // Test creating a new flexible layout.
    $template_name1 = $this->randomName();
    $template_machine_name1 = strtolower($template_name1);
    $template_description1 = $this->randomName();

    $edit = array(
      'name' => $template_name1,
      'machine_name' => $template_machine_name1,
      'description' => $template_description1,
    );
    $this->backdropPost(NULL, $edit, t('Save and configure'));
    $this->assertText(t('Layout template saved.'));

    // Check that the new template is found in the cached list of templates.
    $all_templates = layout_get_layout_template_info();
    $this->assertTrue(isset($all_templates[$template_machine_name1]), 'The flexible template is found in the cache of templates.');

    // Check that its in the list of templates.
    $this->backdropGet('admin/structure/layouts/settings');
    $title = $this->xpath("//td//div[text()=:name]", array(':name' => $template_name1));
    $this->assertTrue($title, 'The flexible template is found in the UI list of templates.');

    // Add another, edit it, then delete it.
    $this->clickLink(t('Add flexible layout template'));
    $template_name2 = $this->randomName();
    $template_machine_name2 = strtolower($template_name2);
    $template_description2 = $this->randomName();

    $edit = array(
      'name' => $template_name2,
      'machine_name' => $template_machine_name2,
      'description' => $template_description2,
    );
    $this->backdropPost(NULL, $edit, t('Save and configure'));
    $this->assertText(t('Layout template saved.'));
    $this->backdropGet('admin/structure/layouts/settings');
    $flexible_layout_edit_link = 'admin/structure/layouts/settings/flexible-template/' . $template_machine_name2 . '/edit';
    $edit = array(
      'name' => 'To be deleted',
      'description' => $template_description2,
    );
    $this->backdropPost($flexible_layout_edit_link, $edit, t('Save and configure'));
    $this->backdropGet('admin/structure/layouts/settings');
    $title = $this->xpath("//td//div[text()=:name]", array(':name' => 'To be deleted'));
    $this->assertTrue($title, 'The flexible template is found in the UI list of templates with the new name.');
    $flexible_layout_delete_link = 'admin/structure/layouts/settings/flexible-template/' . $template_machine_name2 . '/delete';
    $edit = array();
    $this->backdropPost($flexible_layout_delete_link, $edit, t('Delete template'));
    $this->backdropGet('admin/structure/layouts/settings');
    $title = $this->xpath("//td//div[text()=:name]", array(':name' => 'To be deleted'));
    $this->assertFalse($title, 'The flexible template is not found in the UI list of templates with the new name.');

    $this->backdropGet('admin/structure/layouts');
    $this->clickLink(t('Add layout'));

    // Create a new layout at a new path using the new template.
    $layout_title = $this->randomName();
    $layout_name = strtolower($layout_title);
    $layout_url = 'layout-test-path';
    $edit = array(
      'title' => $layout_title,
      'name' => $layout_name,
      'layout_template' => $template_machine_name1,
      'path' => $layout_url,
    );
    $this->backdropPost(NULL, $edit, t('Create layout'));

    // We should be taken to the layout content page next.
    $this->assertText(t('Layout created. Blocks may now be added to this layout.'));

    // Add a block to the first row.
    $this->clickLink(t('Add block'), 0);
    $this->assertText(t('A testing block for layouts.'));
    $this->clickLink(t('Layout foo block'));
    $edit = array(
      'block_settings[count]' => 30,
    );
    $this->backdropPost(NULL, $edit, t('Add block'));

    // Add a block to the second row.
    $this->clickLink(t('Add block'), 1);
    $this->assertText(t('A testing block for layouts.'));
    $this->clickLink(t('Layout foo block'));
    $edit = array(
      'block_settings[count]' => 15,
    );
    $this->backdropPost(NULL, $edit, t('Add block'));

    // Add a block to the third row.
    $this->clickLink(t('Add block'), 2);
    $this->assertText(t('A testing block for layouts.'));
    $this->clickLink(t('Layout foo block'));
    $edit = array(
      'block_settings[count]' => 5,
    );
    $this->backdropPost(NULL, $edit, t('Add block'));

    // Save the layout.
    $this->backdropPost(NULL, array(), t('Save layout'));

    // Check that the layout is in the listing of layouts.
    $this->backdropGet('admin/structure/layouts');
    $this->assertText(check_plain($layout_title));

    // Go to the the layout path and confirm the block exists, has the right
    // setting, and is the right place.
    $this->backdropGet($layout_url);
    $region_block_settings = array(
      'header' => 30,
      'content' => 15,
      'footer' => 5,
    );
    foreach ($region_block_settings as $region => $setting) {
      $string = format_string('The setting of count is @setting.', array('@setting' => $setting));
      $elements = $this->xpath('//*[contains(@class,:region)]//*[contains(text(),:string)]', array(
        ':region' => 'l-' . $region,
        ':string' => $string,
      ));
      $this->assertEqual(count($elements), 1, "The sample block was found in the $region region.");
    }

    // Configure the first template.
    $flexible_layout_configure_link = 'admin/structure/layouts/settings/flexible-template/' . $template_machine_name1 . '/configure';
    $this->backdropGet($flexible_layout_configure_link);
    // Check for the default three rows.
    $rows = $this->xpath("//*[@id=:id]//*[contains(@id, :row_id)]", array(':id' => 'flexible-content', ':row_id' => 'flexible-row'));
    //*[@id="flexible-content"]//*[contains(concat(' ',normalize-space(@class),' '),' flexible-row ')]
    $this->assertEqual(count($rows), 3, 'Three rows are found in the template');

    // Edit the header row and check that the changes are reflected on the
    // template editor page and the layout path.
    $this->clickLink(t('Configure row'), 0);
    $edit = array(
      'region_names[region_name_0]' => 'New header',
      'row_classes' => 'new-class another-class',
      'element' => 'main',
      'container' => 'no_container',
    );
    $this->backdropPost(NULL, $edit, t('Save configuration'));

    $header_row = $this->xpath("//main[contains(@id, :row_id)]//h2[text()=:row_title]", array(':row_id' => 'flexible-row-id-header', ':row_title' => 'New header'));
    $this->assertEqual(count($header_row), 1, 'The header row has been renamed in the template editor.');

    $this->backdropPost(NULL, array(), t('Save layout template'));

    // Go to the block add page and check that the header region was renamed.
    $this->backdropGet('admin/structure/layouts/manage/' . $layout_name);
    $header_row = $this->xpath("//main[contains(@class, :row_class)]//h2[text()=:row_title]", array(':row_class' => 'l-header', ':row_title' => 'New header'));
    $this->assertEqual(count($header_row), 1, 'The header row has been renamed in the block add page.');

    // Go to the layout path and check that the header region was renamed and
    // the block is still in the header region.
    $this->backdropGet($layout_url);

    $string = format_string('The setting of count is @setting.', array('@setting' => 30));
    $elements = $this->xpath('//main[contains(@class,:region)]//*[contains(text(),:string)]', array(
      ':region' => 'l-header',
      ':string' => $string,
    ));
    $this->assertEqual(count($elements), 1, "The header element has been changed to 'main'");

    // Go to the template editor and add a new row.
    $flexible_layout_configure_link = 'admin/structure/layouts/settings/flexible-template/' . $template_machine_name1 . '/configure';
    $this->backdropGet($flexible_layout_configure_link);
    $this->backdropPost(NULL, array(), t('Add row'));

    // Delete a row.
    // Save the template.
    // Check the template is available to the default layout and switch to it.
    // Add blocks to the new regions.
    // Check the front end display.
    


  }


}

