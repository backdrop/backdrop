<?php

/**
 * @file
 * Mock module for locale layer tests.
 */

/**
 * Implements hook_boot().
 *
 * For testing domain language negotiation, we fake it by setting
 * the HTTP_HOST here
 */
function locale_test_boot() {
  if (variable_get('locale_test_domain')) {
    $_SERVER['HTTP_HOST'] = variable_get('locale_test_domain');
  }
}

/**
 * Implements hook_init().
 */
function locale_test_init() {
  locale_test_store_language_negotiation();
  if (isset($GLOBALS['language_interface']) && isset($GLOBALS['language_interface']->provider)) {
    drupal_set_message(t('Language negotiation provider: @name', array('@name' => $GLOBALS['language_interface']->provider)));
  }
}

/**
 * Implements hook_language_types_info().
 */
function locale_test_language_types_info() {
  if (variable_get('locale_test_language_types', FALSE)) {
    return array(
      'test_language_type' => array(
        'name' => t('Test'),
        'description' => t('A test language type.'),
      ),
      'fixed_test_language_type' => array(
        'fixed' => array('test_language_provider'),
      ),
    );
  }
}

/**
 * Implements hook_language_types_info_alter().
 */
function locale_test_language_types_info_alter(array &$language_types) {
  if (variable_get('locale_test_content_language_type', FALSE)) {
    unset($language_types[LANGUAGE_TYPE_CONTENT]['fixed']);
  }
}

/**
 * Implements hook_language_negotiation_info().
 */
function locale_test_language_negotiation_info() {
  if (variable_get('locale_test_language_negotiation_info', FALSE)) {
    $info = array(
      'callbacks' => array(
        'language' => 'locale_test_language_provider',
      ),
      'file' => drupal_get_path('module', 'locale_test') .'/locale_test.module',
      'weight' => -10,
      'description' => t('This is a test language provider.'),
    );

    return array(
      'test_language_provider' => array(
        'name' => t('Test'),
        'types' => array(LANGUAGE_TYPE_CONTENT, 'test_language_type', 'fixed_test_language_type'),
      ) + $info,
      'test_language_provider_ts' => array(
        'name' => t('Type-specific test'),
        'types' => array('test_language_type'),
      ) + $info,
    );
  }
}

/**
 * Implements hook_language_negotiation_info_alter().
 */
function locale_test_language_negotiation_info_alter(array &$language_providers) {
  if (variable_get('locale_test_language_negotiation_info_alter', FALSE)) {
    unset($language_providers[LANGUAGE_NEGOTIATION_INTERFACE]);
  }
}

/**
 * Store the last negotiated languages.
 */
function locale_test_store_language_negotiation() {
  $last = array();
  foreach (language_types_get_all() as $type) {
    $last[$type] = $GLOBALS[$type]->langcode;
  }
  variable_set('locale_test_language_negotiation_last', $last);
}

/**
 * Test language provider.
 */
function locale_test_language_provider($languages) {
  return 'it';
}
