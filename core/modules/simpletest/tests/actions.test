<?php

class ActionsConfigurationTestCase extends DrupalWebTestCase {
  /**
   * Test the configuration of advanced actions through the administration
   * interface.
   */
  function testActionConfiguration() {
    // Create a user with permission to view the actions administration pages.
    $user = $this->drupalCreateUser(array('administer actions'));
    $this->drupalLogin($user);

    // Make a POST request to admin/config/system/actions/manage.
    $edit = array();
    $edit['action'] = drupal_hash_base64('system_goto_action');
    $this->drupalPost('admin/config/system/actions/manage', $edit, t('Create'));

    // Make a POST request to the individual action configuration page.
    $edit = array();
    $action_label = $this->randomName();
    $edit['actions_label'] = $action_label;
    $edit['url'] = 'admin';
    $this->drupalPost('admin/config/system/actions/configure/' . drupal_hash_base64('system_goto_action'), $edit, t('Save'));

    // Make sure that the new complex action was saved properly.
    $this->assertText(t('The action has been successfully saved.'), t("Make sure we get a confirmation that we've successfully saved the complex action."));
    $this->assertText($action_label, t("Make sure the action label appears on the configuration page after we've saved the complex action."));

    // Make another POST request to the action edit page.
    $this->clickLink(t('Configure'));
    preg_match('|admin/config/system/actions/configure/(\d+)|', $this->getUrl(), $matches);
    $aid = $matches[1];
    $edit = array();
    $new_action_label = $this->randomName();
    $edit['actions_label'] = $new_action_label;
    $edit['url'] = 'admin';
    $this->drupalPost(NULL, $edit, t('Save'));

    // Make sure that the action updated properly.
    $this->assertText(t('The action has been successfully saved.'), t("Make sure we get a confirmation that we've successfully updated the complex action."));
    $this->assertNoText($action_label, t("Make sure the old action label does NOT appear on the configuration page after we've updated the complex action."));
    $this->assertText($new_action_label, t("Make sure the action label appears on the configuration page after we've updated the complex action."));

    // Make sure that deletions work properly.
    $this->clickLink(t('Delete'));
    $edit = array();
    $this->drupalPost("admin/config/system/actions/delete/$aid", $edit, t('Delete'));

    // Make sure that the action was actually deleted.
    $this->assertRaw(t('Action %action was deleted', array('%action' => $new_action_label)), t('Make sure that we get a delete confirmation message.'));
    $this->drupalGet('admin/config/system/actions/manage');
    $this->assertNoText($new_action_label, t("Make sure the action label does not appear on the overview page after we've deleted the action."));
    $exists = db_query('SELECT aid FROM {actions} WHERE callback = :callback', array(':callback' => 'drupal_goto_action'))->fetchField();
    $this->assertFalse($exists, t('Make sure the action is gone from the database after being deleted.'));
  }
}

/**
 * Test actions executing in a potential loop, and make sure they abort properly.
 */
class ActionLoopTestCase extends DrupalWebTestCase {
  protected $aid;

  function setUp() {
    parent::setUp('dblog', 'actions_loop_test');
  }

  /**
   * Set up a loop with 3 - 12 recursions, and see if it aborts properly.
   */
  function testActionLoop() {
    $user = $this->drupalCreateUser(array('administer actions'));
    $this->drupalLogin($user);

    $info = actions_loop_test_action_info();
    $this->aid = actions_save('actions_loop_test_log', $info['actions_loop_test_log']['type'], array(), $info['actions_loop_test_log']['label']);

    // Delete any existing watchdog messages to clear the plethora of
    // "Action added" messages from when Drupal was installed.
    db_delete('watchdog')->execute();
    // To prevent this test from failing when xdebug is enabled, the maximum
    // recursion level should be kept low enough to prevent the xdebug
    // infinite recursion protection mechanism from aborting the request.
    // See http://drupal.org/node/587634.
    variable_set('actions_max_stack', 7);
    $this->triggerActions();
  }

  /**
   * Create an infinite loop by causing a watchdog message to be set,
   * which causes the actions to be triggered again, up to actions_max_stack
   * times.
   */
  protected function triggerActions() {
    $this->drupalGet('<front>', array('query' => array('trigger_actions_on_watchdog' => $this->aid)));
    $expected = array();
    $expected[] = 'Triggering action loop';
    for ($i = 1; $i <= variable_get('actions_max_stack', 35); $i++) {
      $expected[] = "Test log #$i";
    }
    $expected[] = 'Stack overflow: too many calls to actions_do(). Aborting to prevent infinite recursion.';

    $result = db_query("SELECT message FROM {watchdog} WHERE type = 'actions_loop_test' OR type = 'actions' ORDER BY wid");
    $loop_started = FALSE;
    foreach ($result as $row) {
      $expected_message = array_shift($expected);
      $this->assertEqual($row->message, $expected_message, t('Expected message %expected, got %message.', array('%expected' => $expected_message, '%message' => $row->message)));
    }
    $this->assertTrue(empty($expected), t('All expected messages found.'));
  }
}
