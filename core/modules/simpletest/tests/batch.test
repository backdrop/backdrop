<?php

/**
 * @file
 * Tests for the Batch API.
 */

/**
 * Tests for the Batch API.
 */
class BatchProcessingTestCase extends BackdropWebTestCase {
  protected $profile = 'testing';

  function setUp() {
    parent::setUp('batch_test');
  }

  /**
   * Test batches triggered outside of form submission.
   */
  function testBatchNoForm() {
    // Displaying the page triggers batch 1.
    $this->backdropGet('batch-test/no-form');
    $this->assertBatchMessages($this->_resultMessages(1), t('Batch for step 2 performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_1'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));
  }

  /**
   * Test batches defined in a form submit handler.
   */
  function testBatchForm() {
    // Batch 0: no operation.
    $edit = array('batch' => 'batch_0');
    $this->backdropPost('batch-test/simple', $edit, 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_0'), t('Batch with no operation performed successfully.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));

    // Batch 1: several simple operations.
    $edit = array('batch' => 'batch_1');
    $this->backdropPost('batch-test/simple', $edit, 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_1'), t('Batch with simple operations performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_1'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));

    // Batch 2: one multistep operation.
    $edit = array('batch' => 'batch_2');
    $this->backdropPost('batch-test/simple', $edit, 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_2'), t('Batch with multistep operation performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_2'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));

    // Batch 3: simple + multistep combined.
    $edit = array('batch' => 'batch_3');
    $this->backdropPost('batch-test/simple', $edit, 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_3'), t('Batch with simple and multistep operations performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_3'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));

    // Batch 4: nested batch.
    $edit = array('batch' => 'batch_4');
    $this->backdropPost('batch-test/simple', $edit, 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_4'), t('Nested batch performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_4'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));
  }

  /**
   * Test batches defined in a multistep form.
   */
  function testBatchFormMultistep() {
    $this->backdropGet('batch-test/multistep');
    $this->assertText('step 1', t('Form is displayed in step 1.'));

    // First step triggers batch 1.
    $this->backdropPost(NULL, array(), 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_1'), t('Batch for step 1 performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_1'), t('Execution order was correct.'));
    $this->assertText('step 2', t('Form is displayed in step 2.'));

    // Second step triggers batch 2.
    $this->backdropPost(NULL, array(), 'Submit');
    $this->assertBatchMessages($this->_resultMessages('batch_2'), t('Batch for step 2 performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_2'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));
  }

  /**
   * Test batches defined in different submit handlers on the same form.
   */
  function testBatchFormMultipleBatches() {
    // Batches 1, 2 and 3 are triggered in sequence by different submit
    // handlers. Each submit handler modify the submitted 'value'.
    $value = 'sample-value';
    $edit = array('value' => $value);
    $this->backdropPost('batch-test/chained', $edit, 'Submit');

    // Allow space for the timestamp to increment, so items are inserted in a
    // way that they'll be pulled out correctly.
    sleep(2);

    // Check that result messages are present and in the correct order.
    $this->assertBatchMessages($this->_resultMessages('chained'), t('Batches defined in separate submit handlers performed successfully.'));
    // The stack contains execution order of batch callbacks and submit
    // hanlders and logging of corresponding $form_state[{values'].
    $this->assertEqual(batch_test_stack(), $this->_resultStack('chained', $value), t('Execution order was correct, and $form_state is correctly persisted.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));
  }

  /**
   * Test batches defined in a programmatically submitted form.
   */
  function testBatchFormProgrammatic() {
    // Batches 1, 2 and 3 are triggered in sequence by different submit
    // handlers. Each submit handler modify the submitted 'value'.
    $value = 'sample-value-from-menu';
    $this->backdropGet('batch-test/programmatic/' . $value);
    // Check that result messages are present and in the correct order.
    $this->assertBatchMessages($this->_resultMessages('chained'), t('Batches defined in separate submit handlers performed successfully.'));
    // The stack contains execution order of batch callbacks and submit
    // hanlders and logging of corresponding $form_state[{values'].
    $this->assertEqual(batch_test_stack(), $this->_resultStack('chained', $value), t('Execution order was correct, and $form_state is correctly persisted.'));
    $this->assertText('Got out of a programmatic batched form.', t('Page execution continues normally.'));
  }

  /**
   * Test that backdrop_form_submit() can run within a batch operation.
   */
  function testBackdropFormSubmitInBatch() {
    // Displaying the page triggers a batch that programmatically submits a
    // form.
    $value = 'sample-value-from-menu';
    $this->backdropGet('batch-test/nested-programmatic/' . $value);
    $this->assertEqual(batch_test_stack(), array('mock form submitted with value = ' . $value), t('backdrop_form_submit() ran successfully within a batch operation.'));
  }

  /**
   * Test batches that return $context['finished'] > 1 do in fact complete.
   * See http://drupal.org/node/600836
   */
  function testBatchLargePercentage() {
    // Displaying the page triggers batch 5.
    $this->backdropGet('batch-test/large-percentage');
    $this->assertBatchMessages($this->_resultMessages(1), t('Batch for step 2 performed successfully.'));
    $this->assertEqual(batch_test_stack(), $this->_resultStack('batch_5'), t('Execution order was correct.'));
    $this->assertText('Redirection successful.', t('Redirection after batch execution is correct.'));
  }


  /**
   * Will trigger a pass if the texts were found in order in the raw content.
   *
   * @param $texts
   *   Array of raw strings to look for .
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  function assertBatchMessages($texts, $message) {
    $pattern = '|' . implode('.*', $texts) .'|s';
    return $this->assertPattern($pattern, $message);
  }

  /**
   * Helper function: return expected execution stacks for the test batches.
   */
  function _resultStack($id, $value = 0) {
    $stack = array();
    switch ($id) {
      case 'batch_1':
        for ($i = 1; $i <= 10; $i++) {
          $stack[] = "op 1 id $i";
        }
        break;

      case 'batch_2':
        for ($i = 1; $i <= 10; $i++) {
          $stack[] = "op 2 id $i";
        }
        break;

      case 'batch_3':
        for ($i = 1; $i <= 5; $i++) {
          $stack[] = "op 1 id $i";
        }
        for ($i = 1; $i <= 5; $i++) {
          $stack[] = "op 2 id $i";
        }
        for ($i = 6; $i <= 10; $i++) {
          $stack[] = "op 1 id $i";
        }
        for ($i = 6; $i <= 10; $i++) {
          $stack[] = "op 2 id $i";
        }
        break;

      case 'batch_4':
        for ($i = 1; $i <= 5; $i++) {
          $stack[] = "op 1 id $i";
        }
        $stack[] = 'setting up batch 2';
        for ($i = 6; $i <= 10; $i++) {
          $stack[] = "op 1 id $i";
        }
        $stack = array_merge($stack, $this->_resultStack('batch_2'));
        break;

      case 'batch_5':
        for ($i = 1; $i <= 10; $i++) {
          $stack[] = "op 5 id $i";
        }
        break;

      case 'chained':
        $stack[] = 'submit handler 1';
        $stack[] = 'value = ' . $value;
        $stack = array_merge($stack, $this->_resultStack('batch_1'));
        $stack[] = 'submit handler 2';
        $stack[] = 'value = ' . ($value . '-1');
        $stack = array_merge($stack, $this->_resultStack('batch_2'));
        $stack[] = 'submit handler 3';
        $stack[] = 'value = ' . ($value . '-2');
        $stack[] = 'submit handler 4';
        $stack[] = 'value = ' . ($value . '-3');
        $stack = array_merge($stack, $this->_resultStack('batch_3'));
        break;
    }
    return $stack;
  }

  /**
   * Helper function: return expected result messages for the test batches.
   */
  function _resultMessages($id) {
    $messages = array();

    switch ($id) {
      case 'batch_0':
        $messages[] = 'results for batch 0<br />none';
        break;

      case 'batch_1':
        $messages[] = 'results for batch 1<br />op 1: processed 10 elements';
        break;

      case 'batch_2':
        $messages[] = 'results for batch 2<br />op 2: processed 10 elements';
        break;

      case 'batch_3':
        $messages[] = 'results for batch 3<br />op 1: processed 10 elements<br />op 2: processed 10 elements';
        break;

      case 'batch_4':
        $messages[] = 'results for batch 4<br />op 1: processed 10 elements';
        $messages = array_merge($messages, $this->_resultMessages('batch_2'));
        break;

      case 'batch_5':
        $messages[] = 'results for batch 5<br />op 1: processed 10 elements. $context[\'finished\'] > 1 returned from batch process, with success.';
        break;

      case 'chained':
        $messages = array_merge($messages, $this->_resultMessages('batch_1'));
        $messages = array_merge($messages, $this->_resultMessages('batch_2'));
        $messages = array_merge($messages, $this->_resultMessages('batch_3'));
        break;
    }
    return $messages;
  }
}

/**
 * Tests for the Batch API Progress page.
 */
class BatchPageTestCase extends BackdropWebTestCase {
  protected $profile = 'testing';

  function setUp() {
    parent::setUp('batch_test');
  }

  /**
   * Tests that the batch API progress page uses the correct theme.
   */
  function testBatchProgressPageTheme() {
    // Make sure that the page which starts the batch (an administrative page)
    // is using a different theme than would normally be used by the batch API.
    config_set('system.core', 'theme_default', 'bartik');
    config_set('system.core', 'admin_theme', 'seven');
    // Log in as an administrator who can see the administrative theme.
    $admin_user = $this->backdropCreateUser(array('view the administration theme'));
    $this->backdropLogin($admin_user);
    // Visit an administrative page that runs a test batch, and check that the
    // theme that was used during batch execution (which the batch callback
    // function saved as a variable) matches the theme used on the
    // administrative page.
    $this->backdropGet('admin/batch-test/test-theme');
    // The stack should contain the name of the theme used on the progress
    // page.
    $this->assertEqual(batch_test_stack(), array('seven'), t('A progressive batch correctly uses the theme of the page that started the batch.'));
  }
}

/**
 * Tests the function _batch_api_percentage() to make sure that the rounding
 * works properly in all cases.
 */
class BatchPercentagesUnitTestCase extends BackdropUnitTestCase {
  protected $profile = 'testing';
  protected $testCases = array();

  function setUp() {
    // Set up an array of test cases, where the expected values are the keys,
    // and the values are arrays with the keys 'total' and 'current',
    // corresponding with the function parameters of _batch_api_percentage().
    $this->testCases = array(
      // 1/2 is 50%.
      '50' => array('total' => 2, 'current' => 1),
      // Though we should never encounter a case where the current set is set
      // 0, if we did, we should get 0%.
      '0' => array('total' => 3, 'current' => 0),
      // 1/3 is closer to 33% than to 34%.
      '33' => array('total' => 3, 'current' => 1),
      // 2/3 is closer to 67% than to 66%.
      '67' => array('total' => 3, 'current' => 2),
      // 1/199 should round up to 1%.
      '1' => array('total' => 199, 'current' => 1),
      // 198/199 should round down to 99%.
      '99' => array('total' => 199, 'current' => 198),
      // 199/200 would have rounded up to 100%, which would give the false
      // impression of being finished, so we add another digit and should get
      // 99.5%.
      '99.5' => array('total' => 200, 'current' => 199),
      // The same logic holds for 1/200: we should get 0.5%.
      '0.5' => array('total' => 200, 'current' => 1),
      // Numbers that come out evenly, such as 50/200, should be forced to have
      // extra digits for consistancy.
      '25.0' => array('total' => 200, 'current' => 50),
      // Regardless of number of digits we're using, 100% should always just be
      // 100%.
      '100' => array('total' => 200, 'current' => 200),
      // 1998/1999 should similarly round down to 99.9%.
      '99.9' => array('total' => 1999, 'current' => 1998),
      // 1999/2000 should add another digit and go to 99.95%.
      '99.95' => array('total' => 2000, 'current' => 1999),
      // 19999/20000 should add yet another digit and go to 99.995%.
      '99.995' => array('total' => 20000, 'current' => 19999),
      // The next five test cases simulate a batch with a single operation
      // ('total' equals 1) that takes several steps to complete. Within the
      // operation, we imagine that there are 501 items to process, and 100 are
      // completed during each step. The percentages we get back should be
      // rounded the usual way for the first few passes (i.e., 20%, 40%, etc.),
      // but for the last pass through, when 500 out of 501 items have been
      // processed, we do not want to round up to 100%, since that would
      // erroneously indicate that the processing is complete.
      '20' => array('total' => 1, 'current' => 100/501),
      '40' => array('total' => 1, 'current' => 200/501),
      '60' => array('total' => 1, 'current' => 300/501),
      '80' => array('total' => 1, 'current' => 400/501),
      '99.8' => array('total' => 1, 'current' => 500/501),
    );
    require_once BACKDROP_ROOT . '/core/includes/batch.inc';
    parent::setUp();
  }

  /**
   * Test the _batch_api_percentage() function.
   */
  function testBatchPercentages() {
    foreach ($this->testCases as $expected_result => $arguments) {
      // PHP sometimes casts numeric strings that are array keys to integers,
      // cast them back here.
      $expected_result = (string) $expected_result;
      $total = $arguments['total'];
      $current = $arguments['current'];
      $actual_result = _batch_api_percentage($total, $current);
      if ($actual_result === $expected_result) {
        $this->pass(t('Expected the batch api percentage at the state @numerator/@denominator to be @expected%, and got @actual%.', array('@numerator' => $current, '@denominator' => $total, '@expected' => $expected_result, '@actual' => $actual_result)));
      }
      else {
        $this->fail(t('Expected the batch api percentage at the state @numerator/@denominator to be @expected%, but got @actual%.', array('@numerator' => $current, '@denominator' => $total, '@expected' => $expected_result, '@actual' => $actual_result)));
      }
    }
  }
}
