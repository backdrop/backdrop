<?php
/**
 * @file
 * Tests for simpletest.module.
 */

class SimpleTestFunctionalTest extends BackdropWebTestCase {
  protected $profile = 'minimal';

  /**
   * The results array that has been parsed by getTestResults().
   */
  protected $childTestResults;

  /**
   * Store the test ID from each test run for comparison, to ensure they are
   * incrementing.
   */
  protected $test_ids = array();

  function setUp() {
    if (!$this->inCURL()) {
      parent::setUp('simpletest');

      // Create and login user
      $admin_user = $this->backdropCreateUser(array('administer unit tests'));
      $this->backdropLogin($admin_user);
    }
    else {
      parent::setUp('non_existent_module');
    }
  }

  /**
   * Test the internal browsers functionality.
   */
  function testInternalBrowser() {
    if (!$this->inCURL()) {
      $this->backdropGet('node');
      $this->assertTrue($this->backdropGetHeader('Date'), 'An HTTP header was received.');
      $this->assertTitle(t('Welcome to @site-name | @site-name', array('@site-name' => config_get('system.core', 'site_name'))), 'Site title matches.');
      $this->assertNoTitle('Foo', 'Site title does not match.');
      // Make sure that we are locked out of the installer when prefixing
      // using the user-agent header. This is an important security check.
      global $base_url;

      $this->backdropGet($base_url . '/core/install.php', array('external' => TRUE));
      $this->assertResponse(403, 'Cannot access install.php with a "simpletest" user-agent header.');

      $user = $this->backdropCreateUser();
      $this->backdropLogin($user);
      $headers = $this->backdropGetHeaders(TRUE);
      $this->assertEqual(count($headers), 2, 'There was one intermediate request.');
      $this->assertTrue(strpos($headers[0][':status'], '302') !== FALSE, 'Intermediate response code was 302.');
      $this->assertFalse(empty($headers[0]['location']), 'Intermediate request contained a Location header.');
      $this->assertEqual($this->getUrl(), $headers[0]['location'], 'HTTP redirect was followed');
      $this->assertFalse($this->backdropGetHeader('Location'), 'Headers from intermediate request were reset.');
      $this->assertResponse(200, 'Response code from intermediate request was reset.');

      // Add login block to the default layout. Needed for the redirect loop.
      $layout = layout_load('default');
      $layout->addBlock('user', 'login', 'sidebar');
      $layout->save();

      // Test the maximum redirection option.
      $this->backdropLogout();
      $edit = array(
        'name' => $user->name,
        'pass' => $user->pass_raw
      );
      $this->maximumRedirects = 1;
      $this->backdropPost('user?destination=user/logout', $edit, t('Log in'));
      $headers = $this->backdropGetHeaders(TRUE);
      $this->assertEqual(count($headers), 2, 'Simpletest stopped following redirects after the first one.');
    }
  }

  /**
   * Test validation of the User-Agent header we use to perform test requests.
   */
  function testUserAgentValidation() {
    if (!$this->inCURL()) {
      global $base_url;
      $simpletest_path = $base_url . '/' . backdrop_get_path('module', 'simpletest');
      $HTTP_path = $simpletest_path .'/tests/http.php?q=node';
      $https_path = $simpletest_path .'/tests/https.php?q=node';
      // Generate a valid simpletest User-Agent to pass validation.
      $this->assertTrue(preg_match('/simpletest\d+/', $this->databasePrefix, $matches), 'Database prefix contains simpletest prefix.');
      $test_ua = backdrop_generate_test_ua($matches[0]);
      $this->additionalCurlOptions = array(CURLOPT_USERAGENT => $test_ua);

      // Test pages only available for testing.
      $this->backdropGet($HTTP_path);
      $this->assertResponse(200, 'Requesting http.php with a legitimate simpletest User-Agent returns OK.');
      $this->backdropGet($https_path);
      $this->assertResponse(200, 'Requesting https.php with a legitimate simpletest User-Agent returns OK.');

      // Now slightly modify the HMAC on the header, which should not validate.
      $this->additionalCurlOptions = array(CURLOPT_USERAGENT => $test_ua . 'X');
      $this->backdropGet($HTTP_path);
      $this->assertResponse(403, 'Requesting http.php with a bad simpletest User-Agent fails.');
      $this->backdropGet($https_path);
      $this->assertResponse(403, 'Requesting https.php with a bad simpletest User-Agent fails.');

      // Use a real User-Agent and verify that the special files http.php and
      // https.php can't be accessed.
      $this->additionalCurlOptions = array(CURLOPT_USERAGENT => 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12');
      $this->backdropGet($HTTP_path);
      $this->assertResponse(403, 'Requesting http.php with a normal User-Agent fails.');
      $this->backdropGet($https_path);
      $this->assertResponse(403, 'Requesting https.php with a normal User-Agent fails.');
    }
  }

  /**
   * Make sure that tests selected through the web interface are run and
   * that the results are displayed correctly.
   */
  function testWebTestRunner() {
    $this->pass = t('SimpleTest pass.');
    $this->fail = t('SimpleTest fail.');
    $this->valid_permission = 'access content';
    $this->invalid_permission = 'invalid permission';

    if ($this->inCURL()) {
      // Only run following code if this test is running itself through a CURL request.
      $this->stubTest();
    }
    else {
      // Run this test from web interface.
      $this->backdropGet('admin/config/development/testing');

      $edit = array();
      $edit['tests[SimpleTestFunctionalTest]'] = TRUE;
      $this->backdropPost(NULL, $edit, t('Run tests'));

      // Parse results and confirm that they are correct.
      $this->getTestResults();
      $this->confirmStubTestResults();
    }
  }

  /**
   * Test to be run and the results confirmed.
   */
  function stubTest() {
    $this->pass($this->pass);
    $this->fail($this->fail);

    $this->backdropCreateUser(array($this->valid_permission));
    $this->backdropCreateUser(array($this->invalid_permission));

    $this->pass(t('Test ID is @id.', array('@id' => $this->testId)));

    // Generates a warning.
    $i = 1 / 0;

    // Call an assert function specific to that class.
    $this->assertNothing();

    // Generates a warning inside a PHP function.
    array_key_exists(NULL, NULL);

    debug('Foo', 'Debug');
  }

  /**
   * Assert nothing.
   */
  function assertNothing() {
    $this->pass("This is nothing.");
  }

  /**
   * Confirm that the stub test produced the desired results.
   */
  function confirmStubTestResults() {
    $this->assertAssertion(t('Enabled modules: %modules', array('%modules' => 'non_existent_module')), 'Other', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->setUp()');

    $this->assertAssertion($this->pass, 'Other', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
    $this->assertAssertion($this->fail, 'Other', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    $this->assertAssertion(t('Created permissions: @perms', array('@perms' => $this->valid_permission)), 'Role', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
    $this->assertAssertion(t('Invalid permission %permission.', array('%permission' => $this->invalid_permission)), 'Role', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    // Check that a warning is caught by simpletest.
    $this->assertAssertion('Division by zero', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    // Check that the backtracing code works for specific assert function.
    $this->assertAssertion('This is nothing.', 'Other', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    // Check that errors that occur inside PHP internal functions are correctly reported.
    // The exact error message differs between PHP versions so we check only
    // the function name 'array_key_exists'.
    $this->assertAssertion('array_key_exists', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    $this->assertAssertion("Debug: 'Foo'", 'Debug', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    $this->assertEqual('6 passes, 5 fails, 2 exceptions, and 1 debug message', $this->childTestResults['summary'], 'Stub test summary is correct');

    $this->test_ids[] = $test_id = $this->getTestIdFromResults();
    $this->assertTrue($test_id, 'Found test ID in results.');
  }

  /**
   * Fetch the test id from the test results.
   */
  function getTestIdFromResults() {
    foreach ($this->childTestResults['assertions'] as $assertion) {
      if (preg_match('@^PASS: Test ID is ([0-9]*)\.$@', $assertion['message'], $matches)) {
        return $matches[1];
      }
    }
    return NULL;
  }

  /**
   * Assert that an assertion with the specified values is displayed
   * in the test results.
   *
   * @param string $message Assertion message.
   * @param string $type Assertion type.
   * @param string $status Assertion status.
   * @param string $file File where the assertion originated.
   * @param string $functuion Function where the assertion originated.
   * @return Assertion result.
   */
  function assertAssertion($message, $type, $status, $file, $function) {
    $message = trim(strip_tags($message));
    $found = FALSE;
    foreach ($this->childTestResults['assertions'] as $assertion) {
      if ((strpos($assertion['message'], $message) !== FALSE) &&
          $assertion['type'] == $type &&
          $assertion['status'] == $status &&
          $assertion['file'] == $file &&
          $assertion['function'] == $function) {
        $found = TRUE;
        break;
      }
    }
    return $this->assertTrue($found, format_string('Found assertion {"@message", "@type", "@status", "@file", "@function"}.', array('@message' => $message, '@type' => $type, '@status' => $status, "@file" => $file, "@function" => $function)));
  }

  /**
   * Get the results from a test and store them in the class array $results.
   */
  function getTestResults() {
    $results = array();
    if ($this->parse()) {
      if ($fieldset = $this->getResultFieldSet()) {
        // Code assumes this is the only test in group.
        $results['summary'] = $this->asText($fieldset->div->div[1]);
        $results['name'] = $this->asText($fieldset->legend);

        $results['assertions'] = array();
        $tbody = $fieldset->div->table->tbody;
        foreach ($tbody->tr as $row) {
          $assertion = array();
          $assertion['message'] = $this->asText($row->td[0]);
          $assertion['type'] = $this->asText($row->td[1]);
          $assertion['file'] = $this->asText($row->td[2]);
          $assertion['line'] = $this->asText($row->td[3]);
          $assertion['function'] = $this->asText($row->td[4]);
          $ok_url = file_create_url('core/misc/watchdog-ok.png');
          $assertion['status'] = ($row->td[5]->img['src'] == $ok_url) ? 'Pass' : 'Fail';
          $results['assertions'][] = $assertion;
        }
      }
    }
    $this->childTestResults = $results;
  }

  /**
   * Get the fieldset containing the results for group this test is in.
   */
  function getResultFieldSet() {
    $fieldsets = $this->xpath('//fieldset');
    $info = simpletest_test_get_by_class(get_class($this));
    foreach ($fieldsets as $fieldset) {
      if ($this->asText($fieldset->legend) == $info['name']) {
        return $fieldset;
      }
    }
    return FALSE;
  }

  /**
   * Extract the text contained by the element.
   *
   * @param $element
   *   Element to extract text from.
   * @return
   *   Extracted text.
   */
  function asText(SimpleXMLElement $element) {
    if (!is_object($element)) {
      return $this->fail('The element is not an element.');
    }
    return trim(html_entity_decode(strip_tags($element->asXML())));
  }

  /**
   * Check if the test is being run from inside a CURL request.
   */
  function inCURL() {
    return (bool) backdrop_valid_test_ua();
  }
}

/**
 * Test internal testing framework browser.
 */
class SimpleTestBrowserTestCase extends BackdropWebTestCase {
  function setUp() {
    parent::setUp();
    config_set('system.core', 'user_register', USER_REGISTER_VISITORS);
  }

  /**
   * Test BackdropWebTestCase::getAbsoluteUrl().
   */
  function testGetAbsoluteUrl() {
    // Testbed runs with Clean URLs disabled, so disable it here.
    config_set('system.core', 'clean_url', 0);
    backdrop_static_reset('url');
    $url = 'user/login';

    $this->backdropGet($url);
    $absolute = url($url, array('absolute' => TRUE));
    $this->assertEqual($absolute, $this->url, 'Passed and requested URL are equal.');
    $this->assertEqual($this->url, $this->getAbsoluteUrl($this->url), 'Requested and returned absolute URL are equal.');

    $this->backdropPost(NULL, array(), t('Log in'));
    $this->assertEqual($absolute, $this->url, 'Passed and requested URL are equal.');
    $this->assertEqual($this->url, $this->getAbsoluteUrl($this->url), 'Requested and returned absolute URL are equal.');

    $this->clickLink('Create new account');
    $url = 'user/register';
    $absolute = url($url, array('absolute' => TRUE));
    $this->assertEqual($absolute, $this->url, 'Passed and requested URL are equal.');
    $this->assertEqual($this->url, $this->getAbsoluteUrl($this->url), 'Requested and returned absolute URL are equal.');
  }

  /**
   * Tests XPath escaping.
   */
  function testXPathEscaping() {
    $testpage = <<< EOF
<html>
<body>
<a href="link1">A "weird" link, just to bother the dumb "XPath 1.0"</a>
<a href="link2">A second "even more weird" link, in memory of George O'Malley</a>
</body>
</html>
EOF;
    $this->backdropSetContent($testpage);

    // Matches the first link.
    $urls = $this->xpath('//a[text()=:text]', array(':text' => 'A "weird" link, just to bother the dumb "XPath 1.0"'));
    $this->assertEqual($urls[0]['href'], 'link1', 'Match with quotes.');

    $urls = $this->xpath('//a[text()=:text]', array(':text' => 'A second "even more weird" link, in memory of George O\'Malley'));
    $this->assertEqual($urls[0]['href'], 'link2', 'Match with mixed single and double quotes.');
  }
}

class SimpleTestMailCaptureTestCase extends BackdropWebTestCase {
  /**
   * Test to see if the wrapper function is executed correctly.
   */
  function testMailSend() {
    // Create an e-mail.
    $subject = $this->randomString(64);
    $body = $this->randomString(128);
    $message = array(
      'id' => 'backdrop_mail_test',
      'headers' => array('Content-type'=> 'text/html'),
      'subject' => $subject,
      'to' => 'foobar@example.com',
      'body' => $body,
    );

    // Before we send the e-mail, backdropGetMails should return an empty array.
    $captured_emails = $this->backdropGetMails();
    $this->assertEqual(count($captured_emails), 0, 'The captured e-mails queue is empty.', 'E-mail');

    // Send the e-mail.
    $response = backdrop_mail_system('simpletest', 'backdrop_mail_test')->mail($message);

    // Ensure that there is one e-mail in the captured e-mails array.
    $captured_emails = $this->backdropGetMails();
    $this->assertEqual(count($captured_emails), 1, 'One e-mail was captured.', 'E-mail');

    // Assert that the e-mail was sent by iterating over the message properties
    // and ensuring that they are captured intact.
    foreach ($message as $field => $value) {
      $this->assertMail($field, $value, format_string('The e-mail was sent and the value for property @field is intact.', array('@field' => $field)), 'E-mail');
    }

    // Send additional e-mails so more than one e-mail is captured.
    for ($index = 0; $index < 5; $index++) {
      $message = array(
        'id' => 'backdrop_mail_test_' . $index,
        'headers' => array('Content-type'=> 'text/html'),
        'subject' => $this->randomString(64),
        'to' => $this->randomName(32) . '@example.com',
        'body' => $this->randomString(512),
      );
      backdrop_mail_system('backdrop_mail_test', $index)->mail($message);
    }

    // There should now be 6 e-mails captured.
    $captured_emails = $this->backdropGetMails();
    $this->assertEqual(count($captured_emails), 6, 'All e-mails were captured.', 'E-mail');

    // Test different ways of getting filtered e-mails via backdropGetMails().
    $captured_emails = $this->backdropGetMails(array('id' => 'backdrop_mail_test'));
    $this->assertEqual(count($captured_emails), 1, 'Only one e-mail is returned when filtering by id.', 'E-mail');
    $captured_emails = $this->backdropGetMails(array('id' => 'backdrop_mail_test', 'subject' => $subject));
    $this->assertEqual(count($captured_emails), 1, 'Only one e-mail is returned when filtering by id and subject.', 'E-mail');
    $captured_emails = $this->backdropGetMails(array('id' => 'backdrop_mail_test', 'subject' => $subject, 'from' => 'this_was_not_used@example.com'));
    $this->assertEqual(count($captured_emails), 0, 'No e-mails are returned when querying with an unused from address.', 'E-mail');

    // Send the last e-mail again, so we can confirm that the backdropGetMails-filter
    // correctly returns all e-mails with a given property/value.
    backdrop_mail_system('backdrop_mail_test', $index)->mail($message);
    $captured_emails = $this->backdropGetMails(array('id' => 'backdrop_mail_test_4'));
    $this->assertEqual(count($captured_emails), 2, 'All e-mails with the same id are returned when filtering by id.', 'E-mail');
  }
}

/**
 * Test Folder creation
 */
class SimpleTestFolderTestCase extends BackdropWebTestCase {
  protected $profile = 'testing';

  function setUp() {
    return parent::setUp('image');
  }

  function testFolderSetup() {
    $directory = file_default_scheme() . '://styles';
    $this->assertTrue(file_prepare_directory($directory, FALSE), 'Directory created.');
  }
}

/**
 * Test required modules for tests.
 */
class SimpleTestMissingDependentModuleUnitTest extends BackdropUnitTestCase {
  /**
   * Ensure that this test will not be loaded despite its dependency.
   */
  function testFail() {
    $this->fail(t('Running test with missing required module.'));
  }
}

/**
 * Tests a test case that does not run parent::setUp() in its setUp() method.
 *
 * If a test case does not call parent::setUp(), running
 * BackdropTestCase::tearDown() would destroy the main site's database tables.
 * Therefore, we ensure that tests which are not set up properly are skipped.
 *
 * @see BackdropTestCase
 */
class SimpleTestBrokenSetUp extends BackdropWebTestCase {
  function setUp() {
    // If the test is being run from the main site, set up normally.
    if (!backdrop_valid_test_ua()) {
      parent::setUp('simpletest');
      // Create and log in user.
      $admin_user = $this->backdropCreateUser(array('administer unit tests'));
      $this->backdropLogin($admin_user);
    }
    // If the test is being run from within simpletest, set up the broken test.
    else {
      $this->pass(t('The test setUp() method has been run.'));
      // Don't call parent::setUp(). This should trigger an error message.
    }
  }

  function tearDown() {
    // If the test is being run from the main site, tear down normally.
    if (!backdrop_valid_test_ua()) {
      parent::tearDown();
    }
    else {
      // If the test is being run from within simpletest, output a message.
      $this->pass(t('The tearDown() method has run.'));
    }
  }

  /**
   * Runs this test case from within the simpletest child site.
   */
  function testBreakSetUp() {
    // If the test is being run from the main site, run it again from the web
    // interface within the simpletest child site.
    if (!backdrop_valid_test_ua()) {
      $edit['tests[SimpleTestBrokenSetUp]'] = TRUE;
      $this->backdropPost('admin/config/development/testing', $edit, t('Run tests'));

      // Verify that the broken test and its tearDown() method are skipped.
      $this->assertRaw(t('The test setUp() method has been run.'));
      $this->assertRaw(t('The test cannot be executed because it has not been set up properly.'));
      $this->assertNoRaw(t('The test method has run.'));
      $this->assertNoRaw(t('The tearDown() method has run.'));
    }
    // If the test is being run from within simpletest, output a message.
    else {
      $this->pass(t('The test method has run.'));
    }
  }
}

/**
 * Tests missing requirements to run test.
 */
class SimpleTestMissingCheckedRequirements extends BackdropWebTestCase {
  function setUp() {
    parent::setUp('simpletest');
    $admin_user = $this->backdropCreateUser(array('administer unit tests'));
    $this->backdropLogin($admin_user);
  }

  /**
   * Overrides checkRequirements().
   */
  protected function checkRequirements() {
    $errors = parent::checkRequirements();

    if (backdrop_valid_test_ua()) {
      $errors[] = 'Test is not allowed to run.';
    }
    return $errors;
  }

  /**
   * Ensures test will not run when requirements are missing.
   */
  protected function testCheckRequirements() {
    // If this is the main request, run the web test script and then assert
    // that the child tests did not run.
    if (!backdrop_valid_test_ua()) {
      // Run this test from web interface.
      $edit['tests[SimpleTestMissingCheckedRequirements]'] = TRUE;
      $this->backdropPost('admin/config/development/testing', $edit, t('Run tests'));
      $this->assertRaw('Test is not allowed to run.', 'Test check for requirements came up.');
      $this->assertNoText('Test ran when it failed requirements check.', 'Test requirements stopped test from running.');
    }
    else {
      $this->fail('Test ran when it failed requirements check.');
    }
  }
}

/**
 * Verifies that tests bundled with installation profile modules are found.
 */
class SimpleTestInstallationProfileModuleTestsTestCase extends BackdropWebTestCase {
  /**
   * Use the Testing profile.
   *
   * The Testing profile contains backdrop_system_listing_compatible_test.test,
   * which attempts to:
   * - run tests using the Minimal profile (which does not contain the
   *   backdrop_system_listing_compatible_test.module)
   * - but still install the backdrop_system_listing_compatible_test.module
   *   contained in the Testing profile.
   *
   * @see BackdropSystemListingCompatibleTestCase
   */
  protected $profile = 'testing';

  function setUp() {
    parent::setUp(array('simpletest'));

    $this->admin_user = $this->backdropCreateUser(array('administer unit tests'));
    $this->backdropLogin($this->admin_user);
  }

  /**
   * Tests existence of test case located in an installation profile module.
   */
  function testInstallationProfileTests() {
    $this->backdropGet('admin/config/development/testing');
    $this->assertText('Installation profile module tests helper');
    $edit = array(
      'tests[BackdropSystemListingCompatibleTestCase]' => TRUE,
    );
    $this->backdropPost(NULL, $edit, t('Run tests'));
    $this->assertText('BackdropSystemListingCompatibleTestCase test executed.');
  }
}

/**
 * Verifies that tests in other installation profiles are not found.
 *
 * @see SimpleTestInstallationProfileModuleTestsTestCase
 */
class SimpleTestOtherInstallationProfileModuleTestsTestCase extends BackdropWebTestCase {
  /**
   * Use the Minimal profile.
   *
   * The Testing profile contains backdrop_system_listing_compatible_test.test,
   * which should not be found.
   *
   * @see SimpleTestInstallationProfileModuleTestsTestCase
   * @see BackdropSystemListingCompatibleTestCase
   */
  protected $profile = 'minimal';

  function setUp() {
    parent::setUp(array('simpletest'));

    $this->admin_user = $this->backdropCreateUser(array('administer unit tests'));
    $this->backdropLogin($this->admin_user);
  }

  /**
   * Tests that tests located in another installation profile do not appear.
   */
  function testOtherInstallationProfile() {
    $this->backdropGet('admin/config/development/testing');
    $this->assertNoText('Installation profile module tests helper');
  }
}
