<?php
/**
 * @file
 * Various tablesort tests.
 */

/**
 * Test unicode handling features implemented in unicode.inc.
 */
class TableSortTest extends BackdropUnitTestCase {

  /**
   * Storage for initial value of $_GET.
   *
   * @var array
   */
  protected $GET = array();

  function setUp() {
    // Save the original $_GET to be restored later.
    $this->GET = $_GET;

    parent::setUp();
  }

  function tearDown() {
    // Revert $_GET.
    $_GET = $this->GET;

    parent::tearDown();
  }

  /**
   * Test tablesort_init().
   */
  function testTableSortInit() {

    // Test simple table headers.

    $headers = array('foo', 'bar', 'baz');
    // Reset $_GET to prevent parameters from Simpletest and Batch API ending
    // up in $ts['query'].
    $_GET = array('q' => 'jahwohl');
    $expected_ts = array(
      'name' => 'foo',
      'sql' => '',
      'sort' => 'asc',
      'query' => array(),
    );
    $ts = tablesort_init($headers);
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Simple table headers sorted correctly.');

    // Test with simple table headers plus $_GET parameters that should _not_
    // override the default.

    $_GET = array(
      'q' => 'jahwohl',
      // This should not override the table order because only complex
      // headers are overridable.
      'order' => 'bar',
    );
    $ts = tablesort_init($headers);
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Simple table headers plus non-overriding $_GET parameters sorted correctly.');

    // Test with simple table headers plus $_GET parameters that _should_
    // override the default.

    $_GET = array(
      'q' => 'jahwohl',
      'sort' => 'DESC',
      // Add an unrelated parameter to ensure that tablesort will include
      // it in the links that it creates.
      'alpha' => 'beta',
    );
    $expected_ts['sort'] = 'desc';
    $expected_ts['query'] = array('alpha' => 'beta');
    $ts = tablesort_init($headers);
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Simple table headers plus $_GET parameters sorted correctly.');

    // Test complex table headers.

    $headers = array(
      'foo',
      array(
        'data' => '1',
        'field' => 'one',
        'sort' => 'asc',
        'colspan' => 1,
      ),
      array(
        'data' => '2',
        'field' => 'two',
        'sort' => 'desc',
      ),
    );
    // Reset $_GET from previous assertion.
    $_GET = array(
      'q' => 'jahwohl',
      'order' => '2',
    );
    $ts = tablesort_init($headers);
    $expected_ts = array(
      'name' => '2',
      'sql' => 'two',
      'sort' => 'desc',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers sorted correctly.');

    // Test complex table headers plus $_GET parameters that should _not_
    // override the default.
    $_GET = array(
      'q' => 'jahwohl',
      // This should not override the table order because this header does not
      // exist.
      'order' => 'bar',
    );
    $ts = tablesort_init($headers);
    $expected_ts = array(
      'name' => '1',
      'sql' => 'one',
      'sort' => 'asc',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers plus non-overriding $_GET parameters sorted correctly.');
    unset($_GET['sort'], $_GET['order'], $_GET['alpha']);

    // Test complex table headers plus $_GET parameters that _should_ override
    // the default.
    $_GET = array(
      'q' => 'jahwohl',
      'order' => '1',
      'sort' => 'ASC',
      // Add an unrelated parameter to ensure that tablesort will include it in
      // the links that it creates.
      'alpha' => 'beta',
    );
    $expected_ts = array(
      'name' => '1',
      'sql' => 'one',
      'sort' => 'asc',
      'query' => array('alpha' => 'beta'),
    );
    $ts = tablesort_init($headers);
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers plus $_GET parameters sorted correctly.');
    unset($_GET['sort'], $_GET['order'], $_GET['alpha']);

    // Test the initial_click_sort parameter.
    $headers = array()
      'foo',
      array(
        'data' => '1',
        'field' => 'one',
        'initial_click_sort' => 'desc',
        'colspan' => 1,
      ),
      array(
        'data' => '2',
        'field' => 'two',
      ),
      array(
        'data' => '3',
        'field' => 'three',
        'initial_click_sort' => 'desc',
        'sort' => 'asc',
      ),
      array(
        'data' => '4',
        'field' => 'four',
        'initial_click_sort' => 'asc',
      ),
      array(
        'data' => '5',
        'field' => 'five',
        'initial_click_sort' => 'foo',
      ),
    );
    $_GET = array(
      'order' => '1',
    );
    $ts = tablesort_init($headers);
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $expected_ts = array(
      'name' => '1',
      'sql' => 'one',
      'sort' => 'desc',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers using the initial_click_sort parameter are sorted correctly.');

    // Test that if the initial_click_sort parameter is not defined, the default
    // must be used instead (which is "asc").
    $_GET = array(
      'order' => '2',
    );
    $ts = tablesort_init($headers);
    $expected_ts = array(
      'name' => '2',
      'sql' => 'two',
      'sort' => 'asc',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers without using the initial_click_sort parameter are sorted correctly.');

    // Test that if the initial_click_sort parameter is defined, and the sort
    // parameter is defined as well, the sort parameter has precedence.
    $_GET = array(
      'order' => '3',
    );
    $ts = tablesort_init($headers);
    $expected_ts = array(
      'name' => '3',
      'sql' => 'three',
      'sort' => 'asc',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers using the initial_click_sort and sort parameters are sorted correctly.');

    // Test that if the initial_click_sort parameter is defined and the value
    // is "asc" it should be sorted correctly.
    $_GET = array(
      'order' => '4',
    );
    $ts = tablesort_init($headers);
    $expected_ts = array(
      'name' => '4',
      'sql' => 'four',
      'sort' => 'asc',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers with the initial_click_sort set as ASC are sorted correctly.');

    // Tests that if the initial_click_sort is defined with a non expected value
    // that value will be passed as the "sort" value.
    $_GET = array(
      'order' => '5',
    );
    $ts = tablesort_init($headers);
    $expected_ts = array(
      'name' => '5',
      'sql' => 'five',
      'sort' => 'foo',
      'query' => array(),
    );
    $this->verbose(strtr('$ts: <pre>!ts</pre>', array('!ts' => check_plain(var_export($ts, TRUE)))));
    $this->assertEqual($ts, $expected_ts, 'Complex table headers with the initial_click_sort set as foo are sorted correctly.');


  }
}
