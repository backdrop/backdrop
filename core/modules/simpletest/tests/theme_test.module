<?php

/**
 * Implements hook_theme().
 */
function theme_test_theme($existing, $type, $theme, $path) {
  $items['theme_test'] = array(
    'file' => 'theme_test.inc',
    'variables' => array('foo' => ''),
  );
  $items['theme_test_template_test'] = array(
    'template' => 'theme_test.template_test',
  );
  $items['theme_test_template_test_2'] = array(
    'template' => 'theme_test.template_test',
  );
  $items['theme_test_foo'] = array(
    'variables' => array('foo' => NULL),
  );
  return $items;
}

/**
 * Implements hook_system_theme_info().
 */
function theme_test_system_theme_info() {
  $themes['test_theme'] = drupal_get_path('module', 'theme_test') . '/themes/test_theme/test_theme.info';
  $themes['test_basetheme'] = drupal_get_path('module', 'theme_test') . '/themes/test_basetheme/test_basetheme.info';
  $themes['test_subtheme'] = drupal_get_path('module', 'theme_test') . '/themes/test_subtheme/test_subtheme.info';
  return $themes;
}

/**
 * Implements hook_menu().
 */
function theme_test_menu() {
  $items['theme-test/suggestion'] = array(
    'title' => 'Suggestion',
    'page callback' => '_theme_test_suggestion',
    'access callback' => TRUE,
    'theme callback' => '_theme_custom_theme',
    'type' => MENU_CALLBACK,
  );
  $items['theme-test/alter'] = array(
    'title' => 'Suggestion',
    'page callback' => '_theme_test_alter',
    'access callback' => TRUE,
    'theme callback' => '_theme_custom_theme',
    'type' => MENU_CALLBACK,
  );
  $items['theme-test/hook-init'] = array(
    'page callback' => 'theme_test_hook_init_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['theme-test/template-test'] = array(
    'page callback' => 'theme_test_template_test_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['theme-test'] = array(
    'title' => 'Theme test',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => TRUE,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  $items['theme-test/list/operations'] = array(
    'title' => 'Operations',
    'page callback' => '_theme_test_list_operations',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function theme_test_init() {
  if (arg(0) == 'theme-test' && arg(1) == 'hook-init') {
    // First, force the theme registry to be rebuilt on this page request. This
    // allows us to test a full initialization of the theme system in the code
    // below.
    drupal_theme_rebuild();
    // Next, initialize the theme system by storing themed text in a global
    // variable. We will use this later in theme_test_hook_init_page_callback()
    // to test that even when the theme system is initialized this early, it is
    // still capable of returning output and theming the page as a whole.
    $GLOBALS['theme_test_output'] = theme('more_link', array('url' => 'user', 'title' => 'Themed output generated in hook_init()'));
  }
}

/**
 * Implements hook_exit().
 */
function theme_test_exit() {
  if (arg(0) == 'user') {
    // Register a fake registry loading callback. If it gets called by
    // theme_get_registry(), the registry has not been initialized yet.
    _theme_registry_callback('_theme_test_load_registry', array());
    print theme_get_registry() ? 'registry initialized' : 'registry not initialized';
  }
}

/**
 * Fake registry loading callback.
 */
function _theme_test_load_registry() {
  return array();
}

/**
 * Menu callback for testing themed output generated in hook_init().
 */
function theme_test_hook_init_page_callback() {
  return $GLOBALS['theme_test_output'];
}

/**
 * Menu callback for testing template overridding based on filename.
 */
function theme_test_template_test_page_callback() {
  return theme('theme_test_template_test');
}

/**
 * Custom theme callback.
 */
function _theme_custom_theme() {
  return 'test_theme';
}

/**
 * Page callback, calls drupal_alter().
 *
 * This is for testing that the theme can have hook_*_alter() implementations
 * that run during page callback execution, even before theme() is called for
 * the first time.
 */
function _theme_test_alter() {
  $data = 'foo';
  drupal_alter('theme_test_alter', $data);
  return "The altered data is $data.";
}

/**
 * Page callback, calls a theme hook suggestion.
 */
function _theme_test_suggestion() {
  return theme(array('theme_test__suggestion', 'theme_test'), array());
}

/**
 * Implements hook_preprocess_html().
 */
function theme_test_preprocess_html(&$variables) {
  $variables['html_attributes_array']['theme_test_html_attribute'] = 'theme test html attribute value';
  $variables['body_attributes_array']['theme_test_body_attribute'] = 'theme test body attribute value';
}

/**
 * Theme function for testing theme('theme_test_foo').
 */
function theme_theme_test_foo($variables) {
  return $variables['foo'];
}

/**
 * Page callback for manual testing of operation links.
 */
function _theme_test_list_operations() {
  $build = array(
    '#theme' => 'table',
    '#header' => array('Label', 'Created', 'Operations'),
    '#rows' => array(),
  );
  // Add an item with a very long label, using common operations.
  $build['#rows']['long']['label'] = l('An item with a very insanely long label, which offers quite a couple of common operations', 'item/long');
  $build['#rows']['long']['created'] = format_interval(3200);
  $build['#rows']['long']['operations'] = array(
    'data' => array(
      '#type' => 'operations',
      '#subtype' => 'node',
      '#links' => array(
        'edit' => array(
          'title' => 'edit',
          'href' => 'item/long/edit',
        ),
        'disable' => array(
          'title' => 'disable',
          'href' => 'item/long/disable',
        ),
        'clone' => array(
          'title' => 'clone',
          'href' => 'item/long/clone',
        ),
        'delete' => array(
          'title' => 'delete',
          'href' => 'item/long/delete',
        ),
      ),
    ),
  );

  // Add another item, using common operations.
  $build['#rows']['another']['label'] = l('Another item, using common operations', 'item/another');
  $build['#rows']['another']['created'] = format_interval(8600);
  $build['#rows']['another']['operations'] = $build['#rows']['long']['operations'];

  // Add an item with only one operation.
  $build['#rows']['one']['label'] = l('An item with only one operation', 'item/one');
  $build['#rows']['one']['created'] = format_interval(12400);
  $build['#rows']['one']['operations'] = array(
    'data' => array(
      '#type' => 'operations',
      '#subtype' => 'node',
      '#links' => array(
        'edit' => array(
          'title' => 'edit',
          'href' => 'item/long/edit',
        ),
      ),
    ),
  );

  // Add an item that can only be viewed.
  $build['#rows']['view']['label'] = l('An item that can only be viewed', 'item/view');
  $build['#rows']['view']['created'] = format_interval(12400);
  $build['#rows']['view']['operations'] = array(
    'data' => array(
      '#type' => 'operations',
      '#subtype' => 'node',
      '#links' => array(),
    ),
  );

  // Add an item for which the default operation is denied.
  $build['#rows']['denied']['label'] = l('An item for which the default operation is denied', 'item/denied');
  $build['#rows']['denied']['created'] = format_interval(18600);
  $build['#rows']['denied']['operations'] = $build['#rows']['long']['operations'];
  unset($build['#rows']['denied']['operations']['data']['#links']['edit']);

  return $build;
}
