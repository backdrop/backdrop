<?php
/**
 * @file
 * Install, update and uninstall functions for the system module.
 */

/**
 * Implements hook_requirements().
 */
function system_requirements($phase) {
  global $base_url;
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  // Report Backdrop version
  if ($phase == 'runtime') {
    $requirements['backdrop'] = array(
      'title' => $t('Backdrop CMS'),
      'value' => BACKDROP_VERSION,
      'severity' => REQUIREMENT_INFO,
      'weight' => -10,
    );

    // Display the currently active installation profile, if the site
    // is not running the default installation profile.
    $profile = backdrop_get_profile();
    if ($profile != 'standard') {
      $info = system_get_info('module', $profile);
      $requirements['install_profile'] = array(
        'title' => $t('Install profile'),
        'value' => $t('%profile_name (%profile-%version)', array(
          '%profile_name' => $info['name'],
          '%profile' => $profile,
          '%version' => $info['version']
        )),
        'severity' => REQUIREMENT_INFO,
        'weight' => -9
      );
    }
  }

  // Web server information.
  $software = $_SERVER['SERVER_SOFTWARE'];
  $requirements['webserver'] = array(
    'title' => $t('Web server'),
    'value' => $software,
  );

  // Test PHP version and show link to phpinfo() if it's available
  $phpversion = phpversion();
  if (function_exists('phpinfo')) {
    $requirements['php'] = array(
      'title' => $t('PHP'),
      'value' => ($phase == 'runtime') ? $phpversion .' ('. l($t('more information'), 'admin/reports/status/php') .')' : $phpversion,
    );
  }
  else {
    $requirements['php'] = array(
      'title' => $t('PHP'),
      'value' => $phpversion,
      'description' => $t('The phpinfo() function has been disabled for security reasons. To see your server\'s phpinfo() information, change your PHP settings or contact your server administrator. For more information, <a href="@phpinfo">Enabling and disabling phpinfo()</a> handbook page.', array('@phpinfo' => 'http://drupal.org/node/243993')),
      'severity' => REQUIREMENT_INFO,
    );
  }

  if (version_compare($phpversion, BACKDROP_MINIMUM_PHP) < 0) {
    $requirements['php']['description'] = $t('Your PHP installation is too old. Backdrop requires at least PHP %version.', array('%version' => BACKDROP_MINIMUM_PHP));
    $requirements['php']['severity'] = REQUIREMENT_ERROR;
    // If PHP is old, it's not safe to continue with the requirements check.
    return $requirements;
  }

  // Test PHP register_globals setting.
  $requirements['php_register_globals'] = array(
    'title' => $t('PHP register globals'),
  );
  $register_globals = trim(ini_get('register_globals'));
  // Unfortunately, ini_get() may return many different values, and we can't
  // be certain which values mean 'on', so we instead check for 'not off'
  // since we never want to tell the user that their site is secure
  // (register_globals off), when it is in fact on. We can only guarantee
  // register_globals is off if the value returned is 'off', '', or 0.
  if (!empty($register_globals) && strtolower($register_globals) != 'off') {
    $requirements['php_register_globals']['description'] = $t('<em>register_globals</em> is enabled. Backdrop requires this configuration directive to be disabled. Your site may not be secure when <em>register_globals</em> is enabled. The PHP manual has instructions for <a href="http://php.net/configuration.changes">how to change configuration settings</a>.');
    $requirements['php_register_globals']['severity'] = REQUIREMENT_ERROR;
    $requirements['php_register_globals']['value'] = $t("Enabled ('@value')", array('@value' => $register_globals));
  }
  else {
    $requirements['php_register_globals']['value'] = $t('Disabled');
  }

  // Test for PHP extensions.
  $requirements['php_extensions'] = array(
    'title' => $t('PHP extensions'),
  );

  $missing_extensions = array();
  $required_extensions = array(
    'date',
    'dom',
    'filter',
    'gd',
    'hash',
    'json',
    'pcre',
    'pdo',
    'session',
    'SimpleXML',
    'SPL',
    'xml',
  );
  foreach ($required_extensions as $extension) {
    if (!extension_loaded($extension)) {
      $missing_extensions[] = $extension;
    }
  }

  if (!empty($missing_extensions)) {
    $description = $t('Backdrop requires you to enable the PHP extensions in the following list (see the <a href="@system_requirements">system requirements page</a> for more information):', array(
      '@system_requirements' => 'http://drupal.org/requirements',
    ));

    $description .= theme('item_list', array('items' => $missing_extensions));

    $requirements['php_extensions']['value'] = $t('Disabled');
    $requirements['php_extensions']['severity'] = REQUIREMENT_ERROR;
    $requirements['php_extensions']['description'] = $description;
  }
  else {
    $requirements['php_extensions']['value'] = $t('Enabled');
  }

  if ($phase == 'install' || $phase == 'update') {
    // Test for PDO (database).
    $requirements['database_extensions'] = array(
      'title' => $t('Database support'),
    );

    // Make sure PDO is available.
    $database_ok = extension_loaded('pdo');
    if (!$database_ok) {
      $pdo_message = $t('Your web server does not appear to support PDO (PHP Data Objects). Ask your hosting provider if they support the native PDO extension. See the <a href="@link">system requirements</a> page for more information.', array(
        '@link' => 'http://drupal.org/requirements/pdo',
      ));
    }
    else {
      // Make sure the native PDO extension is available, not the older PEAR
      // version. (See install_verify_pdo() for details.)
      if (!defined('PDO::ATTR_DEFAULT_FETCH_MODE')) {
        $database_ok = FALSE;
        $pdo_message = $t('Your web server seems to have the wrong version of PDO installed. Backdrop CMS requires the PDO extension from PHP core. This system has the older PECL version. See the <a href="@link">system requirements</a> page for more information.', array(
          '@link' => 'http://backdropcms.org/guide/requirements',
        ));
      }
    }

    if (!$database_ok) {
      $requirements['database_extensions']['value'] = $t('Disabled');
      $requirements['database_extensions']['severity'] = REQUIREMENT_ERROR;
      $requirements['database_extensions']['description'] = $pdo_message;
    }
    else {
      $requirements['database_extensions']['value'] = $t('Enabled');
    }
  }
  else {
    // Database information.
    $class = 'DatabaseTasks_' . Database::getConnection()->driver();
    $tasks = new $class();
    $requirements['database_system'] = array(
      'title' => $t('Database system'),
      'value' => $tasks->name(),
    );
    $requirements['database_system_version'] = array(
      'title' => $t('Database system version'),
      'value' => Database::getConnection()->version(),
    );
  }

  // Test PHP memory_limit
  $memory_limit = ini_get('memory_limit');
  $requirements['php_memory_limit'] = array(
    'title' => $t('PHP memory limit'),
    'value' => $memory_limit == -1 ? t('-1 (Unlimited)') : $memory_limit,
  );

  if (!backdrop_check_memory_limit(BACKDROP_MINIMUM_PHP_MEMORY_LIMIT, $memory_limit)) {
    $description = '';
    if ($phase == 'install') {
      $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the installation process.', array('%memory_minimum_limit' => BACKDROP_MINIMUM_PHP_MEMORY_LIMIT));
    }
    elseif ($phase == 'update') {
      $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the update process.', array('%memory_minimum_limit' => BACKDROP_MINIMUM_PHP_MEMORY_LIMIT));
    }
    elseif ($phase == 'runtime') {
      $description = $t('Depending on your configuration, Backdrop can run with a %memory_limit PHP memory limit. However, a %memory_minimum_limit PHP memory limit or above is recommended, especially if your site uses additional custom or contributed modules.', array('%memory_limit' => $memory_limit, '%memory_minimum_limit' => BACKDROP_MINIMUM_PHP_MEMORY_LIMIT));
    }

    if (!empty($description)) {
      if ($php_ini_path = get_cfg_var('cfg_file_path')) {
        $description .= ' ' . $t('Increase the memory limit by editing the memory_limit parameter in the file %configuration-file and then restart your web server (or contact your system administrator or hosting provider for assistance).', array('%configuration-file' => $php_ini_path));
      }
      else {
        $description .= ' ' . $t('Contact your system administrator or hosting provider for assistance with increasing your PHP memory limit.');
      }

      $requirements['php_memory_limit']['description'] = $description . ' ' . $t('See the <a href="@url">Backdrop requirements</a> for more information.', array('@url' => 'http://drupal.org/requirements'));
      $requirements['php_memory_limit']['severity'] = REQUIREMENT_WARNING;
    }
  }

  // Test the contents of the .htaccess files.
  if ($phase == 'runtime') {
    // Try to write the .htaccess files first, to prevent false alarms in case
    // (for example) the /tmp directory was wiped.
    file_ensure_htaccess();
    $htaccess_files['public://.htaccess'] = array(
      'title' => $t('Public files directory'),
      'directory' => config_get('system.core', 'file_public_path'),
    );
    if ($private_files_directory = config_get('system.core', 'file_private_path')) {
      $htaccess_files['private://.htaccess'] = array(
        'title' => $t('Private files directory'),
        'directory' => $private_files_directory,
      );
    }
    $htaccess_files['temporary://.htaccess'] = array(
      'title' => $t('Temporary files directory'),
      'directory' => file_directory_temp(),
    );
    foreach ($htaccess_files as $htaccess_file => $info) {
      // Check for the string which was added to the recommended .htaccess file
      // in the latest security update.
      if (!file_exists($htaccess_file) || !($contents = @file_get_contents($htaccess_file)) || strpos($contents, 'Drupal_Security_Do_Not_Remove_See_SA_2013_003') === FALSE) {
        $requirements[$htaccess_file] = array(
          'title' => $info['title'],
          'value' => $t('Not fully protected'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('See <a href="@url">@url</a> for information about the recommended .htaccess file which should be added to the %directory directory to help protect against arbitrary code execution.', array('@url' => 'http://drupal.org/SA-CORE-2013-003', '%directory' => $info['directory'])),
        );
      }
    }
  }

  // Report cron status.
  if ($phase == 'runtime') {
    $config = config('system.core');
    // Cron warning threshold defaults to two days.
    $threshold_warning = $config->get('cron_threshold_warning');
    // Cron error threshold defaults to two weeks.
    $threshold_error = $config->get('cron_threshold_error');
    // Cron configuration help text.
    $help = $t('For more information, see the online handbook entry for <a href="@cron-handbook">configuring cron jobs</a>.', array('@cron-handbook' => 'http://drupal.org/cron'));

    // Determine when cron last ran.
    $cron_last = state_get('cron_last');
    if (!is_numeric($cron_last)) {
      $cron_last = state_get('install_time', 0);
    }

    // Determine severity based on time since cron last ran.
    $severity = REQUIREMENT_OK;
    if (REQUEST_TIME - $cron_last > $threshold_error) {
      $severity = REQUIREMENT_ERROR;
    }
    elseif (REQUEST_TIME - $cron_last > $threshold_warning) {
      $severity = REQUIREMENT_WARNING;
    }

    // Set summary and description based on values determined above.
    $summary = $t('Last run !time ago', array('!time' => format_interval(REQUEST_TIME - $cron_last)));
    $description = '';
    if ($severity != REQUIREMENT_OK) {
      $description = $t('Cron has not run recently.') . ' ' . $help;
    }

    $description .= ' ' . $t('You can <a href="@cron">run cron manually</a>.', array('@cron' => url('admin/reports/status/run-cron')));
    $description .= '<br />' . $t('To run cron from outside the site, go to <a href="!cron">!cron</a>', array('!cron' => url($base_url . '/core/cron.php', array('external' => TRUE, 'query' => array('cron_key' => state_get('cron_key'))))));

    $requirements['cron'] = array(
      'title' => $t('Cron maintenance tasks'),
      'severity' => $severity,
      'value' => $summary,
      'description' => $description
    );
  }

  // Test files directories.
  $directories = array();
  if ($phase == 'runtime') {
    $directories[] = config_get('system.core', 'file_public_path');
    $directories[] = config_get('system.core', 'file_private_path');
    $directories[] = file_directory_temp();
  }
  else {
    $directories[] = 'files';
  }

  $requirements['file system'] = array(
    'title' => $t('File system'),
  );

  $error = '';
  // For installer, create the directories if possible.
  foreach ($directories as $directory) {
    if (!$directory) {
      continue;
    }
    $prepared = file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $is_writable = is_writable($directory);
    $is_directory = is_dir($directory);
    if (!$prepared || !$is_writable || !$is_directory) {
      $description = '';
      $requirements['file system']['value'] = $t('Not writable');
      if (!$is_directory) {
        $error .= $t('The directory %directory does not exist.', array('%directory' => $directory)) . ' ';
      }
      else {
        $error .= $t('The directory %directory is not writable.', array('%directory' => $directory)) . ' ';
      }
      // The files directory requirement check is done only during install and runtime.
      if ($phase == 'runtime') {
        $description = $error . $t('You may need to set the correct directory at the <a href="@admin-file-system">file system settings page</a> or change the current directory\'s permissions so that it is writable.', array('@admin-file-system' => url('admin/config/media/file-system')));
      }
      elseif ($phase == 'install') {
        // For the installer UI, we need different wording. 'value' will
        // be treated as version, so provide none there.
        if ($is_directory && !$is_writable) {
          $description = $error . ' ' . $t('To proceed with installation, you must modify the permissions of this directory to make it writable by the web server. If you are unsure how to do this, please see the <a href="@handbook_url">online handbook</a>.', array('@handbook_url' => 'http://backdropcms.org/guide/installation'));
        }
        else {
          $description = $error . ' ' . $t('An automated attempt to create this directory failed. To proceed with the installation, either create the directory and modify its permissions to make it writable or adjust the permissions on the parent directory to allow the installer to create it automatically. If you are unsure how to do this, see the <a href="@handbook_url">online handbook</a>.', array('@handbook_url' => 'http://backdropcms.org/guide/installation'));
        }
        $requirements['file system']['value'] = '';
      }
      if (!empty($description)) {
        $requirements['file system']['description'] = $description;
        $requirements['file system']['severity'] = REQUIREMENT_ERROR;
      }
    }
    else {
      if (file_default_scheme() == 'public') {
        $requirements['file system']['value'] = $t('Writable (<em>public</em> download method)');
      }
      else {
        $requirements['file system']['value'] = $t('Writable (<em>private</em> download method)');
      }
    }
  }

  // See if updates are available in update.php.
  if ($phase == 'runtime') {
    $requirements['update'] = array(
      'title' => $t('Database updates'),
      'severity' => REQUIREMENT_OK,
      'value' => $t('Up to date'),
    );

    // Check installed modules.
    foreach (module_list() as $module) {
      $updates = backdrop_get_schema_versions($module);
      if ($updates !== FALSE) {
        $current_schema = backdrop_get_installed_schema_version($module);
        $latest_schema = end($updates);
        if ($current_schema < $latest_schema) {
          $requirements['update']['severity'] = REQUIREMENT_ERROR;
          $requirements['update']['value'] = $t('Out of date');
          $requirements['update']['description'] = $t('Some modules have database schema updates to install. You should run the <a href="@update">database update script</a> immediately.', array('@update' => base_path() . 'core/update.php'));
          break;
        }
      }
    }
  }

  // Verify the update.php access setting
  if ($phase == 'runtime') {
    if (!empty($GLOBALS['update_free_access'])) {
      $requirements['update access'] = array(
        'value' => $t('Not protected'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The update.php script is accessible to everyone without authentication check, which is a security risk. You must change the $update_free_access value in your settings.php back to FALSE.'),
      );
    }
    else {
      $requirements['update access'] = array(
        'value' => $t('Protected'),
      );
    }
    $requirements['update access']['title'] = $t('Access to update.php');
  }

  // Display an error if a newly introduced dependency in a module is not resolved.
  if ($phase == 'update') {
    $profile = backdrop_get_profile();
    $files = system_rebuild_module_data();
    foreach ($files as $module => $file) {
      // Ignore disabled modules and installation profiles.
      if (!$file->status || $module == $profile) {
        continue;
      }
      // Check the module's PHP version.
      $name = $file->info['name'];
      $php = $file->info['php'];
      if (version_compare($php, PHP_VERSION, '>')) {
        $requirements['php']['description'] .= $t('@name requires at least PHP @version.', array('@name' => $name, '@version' => $php));
        $requirements['php']['severity'] = REQUIREMENT_ERROR;
      }
      // Check the module's required modules.
      foreach ($file->requires as $requirement) {
        $required_module = $requirement['name'];
        // Check if the module exists.
        if (!isset($files[$required_module])) {
          $requirements["$module-$required_module"] = array(
            'title' => $t('Unresolved dependency'),
            'description' => $t('@name requires this module.', array('@name' => $name)),
            'value' => t('@required_name (Missing)', array('@required_name' => $required_module)),
            'severity' => REQUIREMENT_ERROR,
          );
          continue;
        }
        // Check for an incompatible version.
        $required_file = $files[$required_module];
        $required_name = $required_file->info['name'];
        $version = str_replace(BACKDROP_CORE_COMPATIBILITY . '-', '', $required_file->info['version']);
        $compatibility = backdrop_check_incompatibility($requirement, $version);
        if ($compatibility) {
          $compatibility = rtrim(substr($compatibility, 2), ')');
          $requirements["$module-$required_module"] = array(
            'title' => $t('Unresolved dependency'),
            'description' => $t('@name requires this module and version. Currently using @required_name version @version', array('@name' => $name, '@required_name' => $required_name, '@version' => $version)),
            'value' => t('@required_name (Version @compatibility required)', array('@required_name' => $required_name, '@compatibility' => $compatibility)),
            'severity' => REQUIREMENT_ERROR,
          );
          continue;
        }
      }
    }
  }

  // Test Unicode library
  include_once BACKDROP_ROOT . '/core/includes/unicode.inc';
  $requirements = array_merge($requirements, unicode_requirements());

  if ($phase == 'runtime') {
    // Check for update status module.
    if (!module_exists('update')) {
      $requirements['update status'] = array(
        'value' => $t('Not enabled'),
        'severity' => REQUIREMENT_WARNING,
        'description' => $t('Update notifications are not enabled. It is <strong>highly recommended</strong> that you enable the Update Manager module from the <a href="@module">module administration page</a> in order to stay up-to-date on new releases. For more information, <a href="@update">Update status handbook page</a>.', array('@update' => 'http://drupal.org/handbook/modules/update', '@module' => url('admin/modules'))),
      );
    }
    else {
      $requirements['update status'] = array(
        'value' => $t('Enabled'),
      );
    }
    $requirements['update status']['title'] = $t('Update notifications');

    // Check that Backdrop can issue HTTP requests.
    if (state_get('backdrop_http_request_fails', TRUE) && !system_check_http_request()) {
      $requirements['http requests'] = array(
        'title' => $t('HTTP request status'),
        'value' => $t('Fails'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('Your system or network configuration does not allow Backdrop to access web pages, resulting in reduced functionality. This could be due to your webserver configuration or PHP settings, and should be resolved in order to download information about available updates or use other network-dependent services. If you are certain that Backdrop can access web pages but you are still seeing this message, you may add <code>$state[\'backdrop_http_request_fails\'] = FALSE;</code> to the bottom of your settings.php file.'),
      );
    }
  }

  if ($phase == 'runtime') {
    // Check for various token definition problems.
    $token_problems = token_get_token_problems();
    // Format and display each token problem.
    foreach ($token_problems as $problem_key => $problem) {
      if (!empty($problem['problems'])) {
        $problems = array_unique($problem['problems']);
        $problems = array_map('check_plain', $problems);
        $token_problems[$problem_key] = $problem['label'] . theme('item_list', array('items' => $problems));
      }
      else {
        unset($token_problems[$problem_key]);
      }
    }
    if (!empty($token_problems)) {
      $requirements['token_problems'] = array(
        'title' => $t('Tokens'),
        'value' => $t('Problems detected'),
        'severity' => REQUIREMENT_WARNING,
        'description' => '<p>' . implode('</p><p>', $token_problems) . '</p>',
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function system_install() {
  // Create tables.
  backdrop_install_schema('system');
  $versions = backdrop_get_schema_versions('system');
  $version = $versions ? max($versions) : SCHEMA_INSTALLED;
  backdrop_set_installed_schema_version('system', $version);

  // Clear out module list and hook implementation statics before calling
  // system_rebuild_theme_data().
  module_list(TRUE);
  module_implements_reset();

  // Load system theme data appropriately.
  system_rebuild_theme_data();

  // Enable the default theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'stark')
    ->execute();

  // Populate the cron key variable.
  $cron_key = backdrop_random_key();
  state_set('cron_key', $cron_key);
}

/**
 * Implements hook_schema().
 */
function system_schema() {
  $schema['variable'] = array(
    'description' => 'Named variable/value pairs created by Backdrop core or any other module or theme. All variables are cached in memory at the start of every Backdrop request so developers should not be careless about what is stored here.',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the variable.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the variable.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'translatable' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['batch'] = array(
    'description' => 'Stores details about batches (processes that run in multiple HTTP requests).',
    'fields' => array(
      'bid' => array(
        'description' => 'Primary Key: Unique batch ID.',
        // This is not a serial column, to allow both progressive and
        // non-progressive batches. See batch_process().
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'token' => array(
        'description' => "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'batch' => array(
        'description' => 'A serialized array containing the processing data for the batch.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('bid'),
    'indexes' => array(
      'token' => array('token'),
    ),
  );

  $schema['cache'] = array(
    'description' => 'Generic cache table for caching things not separated out into their own tables. Contributed modules may also use this to store cached items.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique cache ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A collection of data to cache.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'A Unix timestamp indicating when the cache entry was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'serialized' => array(
        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'expire' => array('expire'),
    ),
    'primary key' => array('cid'),
  );
  $schema['cache_bootstrap'] = $schema['cache'];
  $schema['cache_bootstrap']['description'] = 'Cache table for data required to bootstrap Backdrop, may be routed to a shared memory cache.';
  $schema['cache_page'] = $schema['cache'];
  $schema['cache_page']['description'] = 'Cache table used to store compressed pages for anonymous users, if page caching is enabled.';
  $schema['cache_menu'] = $schema['cache'];
  $schema['cache_menu']['description'] = 'Cache table for the menu system to store router information as well as generated link trees for various menu/page/user combinations.';
  $schema['cache_path'] = $schema['cache'];
  $schema['cache_path']['description'] = 'Cache table for path alias lookup.';
  $schema['cache_token'] = $schema['cache'];
  $schema['cache_token']['description'] = 'Cache table for token information.';

  $schema['file_managed'] = array(
    'description' => 'Stores information for uploaded files.',
    'fields' => array(
      'fid' => array(
        'description' => 'File ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the user who is associated with the file.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'filename' => array(
        'description' => 'Name of the file with no path components. This may differ from the basename of the URI if the file is renamed to avoid overwriting an existing file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uri' => array(
        'description' => 'The URI to access the file (either local or remote).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'filemime' => array(
        'description' => "The file's MIME type.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'filesize' => array(
        'description' => 'The size of the file in bytes.',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'A field indicating the status of the file. Two status are defined in core: temporary (0) and permanent (1). Temporary files older than BACKDROP_MAXIMUM_TEMP_FILE_AGE will be removed during a cron run.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp for when the file was added.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'status' => array('status'),
      'timestamp' => array('timestamp'),
    ),
    'unique keys' => array(
      'uri' => array('uri'),
    ),
    'primary key' => array('fid'),
    'foreign keys' => array(
      'file_owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['file_usage'] = array(
    'description' => 'Track where a file is used.',
    'fields' => array(
      'fid' => array(
        'description' => 'File ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => 'The name of the module that is using the file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The name of the object type in which the file is used.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'id' => array(
        'description' => 'The primary key of the object using the file.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'count' => array(
        'description' => 'The number of times this file is used by this object.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('fid', 'type', 'id', 'module'),
    'indexes' => array(
      'type_id' => array('type', 'id'),
      'fid_count' => array('fid', 'count'),
      'fid_module' => array('fid', 'module'),
    ),
  );

  $schema['flood'] = array(
    'description' => 'Flood controls the threshold of events, such as the number of contact attempts.',
    'fields' => array(
      'fid' => array(
        'description' => 'Unique flood event ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'event' => array(
        'description' => 'Name of event (e.g. contact).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'identifier' => array(
        'description' => 'Identifier of the visitor, such as an IP address or hostname.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'Timestamp of the event.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expiration' => array(
        'description' => 'Expiration timestamp. Expired events are purged on cron run.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array(
      'allow' => array('event', 'identifier', 'timestamp'),
      'purge' => array('expiration'),
    ),
  );

  $schema['menu_router'] = array(
    'description' => 'Maps paths to various callbacks (access, page and title)',
    'fields' => array(
      'path' => array(
        'description' => 'Primary Key: the Backdrop path this entry describes',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'load_functions' => array(
        'description' => 'A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path.',
        'type' => 'blob',
        'not null' => TRUE,
      ),
      'to_arg_functions' => array(
        'description' => 'A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string.',
        'type' => 'blob',
        'not null' => TRUE,
      ),
      'access_callback' => array(
        'description' => 'The callback which determines the access to this router path. Defaults to user_access.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'access_arguments' => array(
        'description' => 'A serialized array of arguments for the access callback.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'page_callback' => array(
        'description' => 'The name of the function that renders the page.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'page_arguments' => array(
        'description' => 'A serialized array of arguments for the page callback.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'delivery_callback' => array(
        'description' => 'The name of the function that sends the result of the page_callback function to the browser.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'fit' => array(
        'description' => 'A numeric representation of how specific the path is.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'number_parts' => array(
        'description' => 'Number of parts in this router path.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'context' => array(
        'description' => 'Only for local tasks (tabs) - the context of a local task to control its placement.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tab_parent' => array(
        'description' => 'Only for local tasks (tabs) - the router path of the parent page (which may also be a local task).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'tab_root' => array(
        'description' => 'Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title for the current page, or the title for the tab if this is a local task.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title_callback' => array(
        'description' => 'A function which will alter the title. Defaults to t()',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title_arguments' => array(
        'description' => 'A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'theme_callback' => array(
        'description' => 'A function which returns the name of the theme that will be used to render this page. If left empty, the default theme will be used.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'theme_arguments' => array(
        'description' => 'A serialized array of arguments for the theme callback.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'Numeric representation of the type of the menu item, like MENU_LOCAL_TASK.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'A description of this item.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'position' => array(
        'description' => 'The position of the block (left or right) on the system administration page for this item.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'Weight of the element. Lighter weights are higher up, heavier weights go down.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'include_file' => array(
        'description' => 'The file to include for this element, usually the page callback function lives in this file.',
        'type' => 'text',
        'size' => 'medium',
      ),
    ),
    'indexes' => array(
      'fit' => array('fit'),
      'tab_parent' => array(array('tab_parent', 64), 'weight', 'title'),
      'tab_root_weight_title' => array(array('tab_root', 64), 'weight', 'title'),
    ),
    'primary key' => array('path'),
  );

  $schema['menu_links'] = array(
    'description' => 'Contains the individual links within a menu.',
    'fields' => array(
     'menu_name' => array(
        'description' => "The menu name. All links with the same menu name (such as 'main-menu') are part of the same menu.",
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'mlid' => array(
        'description' => 'The menu link ID (mlid) is the integer primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'plid' => array(
        'description' => 'The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'link_path' => array(
        'description' => 'The Backdrop path or external path this link points to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'router_path' => array(
        'description' => 'For links corresponding to a Backdrop path (external = 0), this connects the link to a {menu_router}.path for joins.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'link_title' => array(
      'description' => 'The text displayed for the link, which may be modified by a title callback stored in {menu_router}.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'options' => array(
        'description' => 'A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes.',
        'type' => 'blob',
        'not null' => FALSE,
        'translatable' => TRUE,
      ),
      'module' => array(
        'description' => 'The name of the module that generated this link.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'system',
      ),
      'hidden' => array(
        'description' => 'A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'external' => array(
        'description' => 'A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'has_children' => array(
        'description' => 'Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'expanded' => array(
        'description' => 'Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded)',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'weight' => array(
        'description' => 'Link weight among links in the same menu at the same depth.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'depth' => array(
        'description' => 'The depth relative to the top level. A link with plid == 0 will have depth == 1.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'customized' => array(
        'description' => 'A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
      'p1' => array(
        'description' => 'The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p2' => array(
        'description' => 'The second mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p3' => array(
        'description' => 'The third mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p4' => array(
        'description' => 'The fourth mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p5' => array(
        'description' => 'The fifth mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p6' => array(
        'description' => 'The sixth mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p7' => array(
        'description' => 'The seventh mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p8' => array(
        'description' => 'The eighth mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'p9' => array(
        'description' => 'The ninth mlid in the materialized path. See p1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'Flag that indicates that this link was generated during the update from Drupal 5.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
      ),
    ),
    'indexes' => array(
      'path_menu' => array(array('link_path', 128), 'menu_name'),
      'menu_plid_expand_child' => array('menu_name', 'plid', 'expanded', 'has_children'),
      'menu_parents' => array('menu_name', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'p8', 'p9'),
      'router_path' => array(array('router_path', 128)),
    ),
    'primary key' => array('mlid'),
  );

  $schema['queue'] = array(
    'description' => 'Stores items in queues.',
    'fields' => array(
      'item_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique item ID.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The queue name.',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'The arbitrary data for the item.',
      ),
      'expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the claim lease expires on the item.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the item was created.',
      ),
    ),
    'primary key' => array('item_id'),
    'indexes' => array(
      'name_created' => array('name', 'created'),
      'expire' => array('expire'),
    ),
  );

  $schema['semaphore'] = array(
    'description' => 'Table for holding semaphores, locks, flags, etc. that cannot be stored as Backdrop variables since they must not be cached.',
    'fields' => array(
      'name' => array(
        'description' => 'Primary Key: Unique name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'value' => array(
        'description' => 'A value for the semaphore.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'expire' => array(
        'description' => 'A Unix timestamp with microseconds indicating when the semaphore should expire.',
        'type' => 'float',
        'size' => 'big',
        'not null' => TRUE
      ),
    ),
    'indexes' => array(
      'value' => array('value'),
      'expire' => array('expire'),
    ),
    'primary key' => array('name'),
  );

  $schema['sequences'] = array(
    'description' => 'Stores IDs.',
    'fields' => array(
      'value' => array(
        'description' => 'The value of the sequence.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
     ),
    'primary key' => array('value'),
  );

  $schema['sessions'] = array(
    'description' => "Backdrop's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
    'fields' => array(
      'uid' => array(
        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => "A session ID. The value is generated by Backdrop's session handlers.",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'ssid' => array(
        'description' => "Secure session ID. The value is generated by Backdrop's session handlers.",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'hostname' => array(
        'description' => 'The IP address that last used this session ID (sid).',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'session' => array(
        'description' => 'The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Backdrop loads $_SESSION from here at the start of each request and saves it at the end.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array(
      'sid',
      'ssid',
    ),
    'indexes' => array(
      'timestamp' => array('timestamp'),
      'uid' => array('uid'),
      'ssid' => array('ssid'),
    ),
    'foreign keys' => array(
      'session_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['state'] = array(
    'description' => 'Stores environment-specific state values.',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the state.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the state.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['system'] = array(
    'description' => "A list of all modules, themes, and theme engines that are or have been installed in Backdrop's file system.",
    'fields' => array(
      'filename' => array(
        'description' => 'The path of the primary file for this item, relative to the Backdrop root; e.g. modules/node/node.module.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the item; e.g. node.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of the item, either module, theme, or theme_engine.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'owner' => array(
        'description' => "A theme's 'parent' . Can be either a theme or an engine.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether or not this item is enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'bootstrap' => array(
        'description' => "Boolean indicating whether this module is loaded during Backdrop's early bootstrapping phase (e.g. even before the page cache is consulted).",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'schema_version' => array(
        'description' => "The module's database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module's hook_update_N() function that has either been run or existed when the module was first installed.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => -1,
        'size' => 'small',
      ),
      'weight' => array(
        'description' => "The order in which this module's hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'info' => array(
        'description' => "A serialized array containing information from the module's .info file; keys can include name, description, package, version, core, dependencies, and php.",
        'type' => 'blob',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('filename'),
    'indexes' => array(
      'system_list' => array('status', 'bootstrap', 'type', 'weight', 'name'),
      'type_name' => array('type', 'name'),
    ),
  );

  $schema['tempstore'] = array(
    'description' => 'Generic temporary key/value storage table with an expiration.',
    'fields' => array(
      'collection' => array(
        'description' => 'A named collection of key and value pairs.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        // KEY is an SQL reserved word, so use 'name' as the key's field name.
        'description' => 'The key of the key/value pair.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the key/value pair.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'The time since Unix epoch in seconds when this item expires.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('collection', 'name'),
    'indexes' => array(
      'all' => array('name', 'collection', 'expire'),
      'expire' => array('expire'),
    ),
  );

  $schema['url_alias'] = array(
    'description' => 'A list of URL aliases for Backdrop paths; a user may visit either the source or destination path.',
    'fields' => array(
      'pid' => array(
        'description' => 'A unique path alias identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'source' => array(
        'description' => 'The Backdrop path this alias is for; e.g. node/12.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'alias' => array(
        'description' => 'The alias for this path; e.g. title-of-the-story.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'langcode' => array(
        'description' => "The language code this alias is for; if 'und', the alias will be used for unknown languages. Each Backdrop path can have an alias for each supported language.",
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'alias_langcode_pid' => array('alias', 'langcode', 'pid'),
      'source_langcode_pid' => array('source', 'langcode', 'pid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 *
 * Returns latest required Drupal 7 schema version for upgrade to Backdrop CMS.
 */
function system_update_last_removed() {
  // Drupal 7.28
  return 7078;
}

/**
 * @defgroup updates-7.x-to-1.x Updates from 7.x to 1.x
 * @{
 * Update functions from Drupal 7.x to Backdrop CMS 1.x.
 */

/**
 * Enable entity module.
 */
function system_update_1000() {
  update_module_enable(array('entity'));
}

/**
 * Move from the Garland theme.
 */
function system_update_1001() {
  $themes = array('theme_default', 'maintenance_theme', 'admin_theme');
  foreach ($themes as $theme) {
    if (update_variable_get($theme) == 'garland') {
      update_variable_set($theme, 'bartik');
    }
  }
}

/**
 * Set Bartik as default theme if it implicitly was the default before.
 *
 * The default theme for Backdrop core was changed from Bartik to Stark.
 * Installation profiles (including Standard and Minimal) were changed to
 * explicitly configure Bartik as default theme. Since Bartik was the default
 * theme by default and may not have been explicitly configured as such
 * previously, this update ensures that the implicit Bartik default is still the
 * default.
 *
 * @see http://drupal.org/node/1181776
 */
function system_update_1002() {
  $theme = update_variable_get('theme_default');
  if (!isset($theme)) {
    update_variable_set('theme_default', 'bartik');
  }
}

/**
 * Convert performance module settings to use configuration files.
 */
function system_update_1003() {
  $config = config('system.core');
  $config->set('cache', update_variable_get('cache', 0));
  $config->set('cache_lifetime', update_variable_get('cache_lifetime', '0'));
  $config->set('page_cache_maximum_age', update_variable_get('page_cache_maximum_age', '0'));
  $config->set('page_compression', update_variable_get('page_compression', 1));
  $config->set('preprocess_css', update_variable_get('preprocess_css', 0));
  $config->set('preprocess_js', update_variable_get('preprocess_js', 0));
  $config->save();

  update_variable_del('cache');
  update_variable_del('cache_lifetime');
  update_variable_del('page_cache_maximum_age');
  update_variable_del('page_compression');
  update_variable_del('preprocess_css');
  update_variable_del('preprocess_js');
}

/**
 * Create the "state" table for the state storage system.
 */
function system_update_1004() {
  if (!db_table_exists('state')) {
    $schema = array(
      'description' => 'Stores environment-specific state values.',
      'fields' => array(
        'name' => array(
          'description' => 'The name of the state.',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ),
        'value' => array(
          'description' => 'The value of the state.',
          'type' => 'blob',
          'not null' => TRUE,
          'size' => 'big',
        ),
      ),
      'primary key' => array('name'),
    );
    db_create_table('state', $schema);
  }
}

/**
 * Convert basic system variables to the state system.
 */
function system_update_1005() {
  $variables = array(
    'install_time' => REQUEST_TIME,
    'install_task' => 'done',
    'maintenance_mode' => FALSE,
    'cron_key' => NULL,
    'cron_last' => REQUEST_TIME,
    'css_js_query_string' => '',
  );
  foreach ($variables as $name => $default) {
    state_set($name, update_variable_get($name, $default));
    update_variable_del($name);
  }
}

/**
 * Delete unneeded actions for manually saving comments and nodes.
 */
function system_update_1006() {
  db_delete('actions')
    ->condition('aid', array('comment_save_action', 'node_save_action'), 'IN')
    ->execute();
}

/**
 * Create the tempstore table and remove the cache_form table.
 */
function system_update_1007() {
  $schema = array(
    'description' => 'Generic temporary key/value storage table with an expiration.',
    'fields' => array(
      'collection' => array(
        'description' => 'A named collection of key and value pairs.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        // KEY is an SQL reserved word, so use 'name' as the key's field name.
        'description' => 'The key of the key/value pair.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the key/value pair.',
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'The time since Unix epoch in seconds when this item expires.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('collection', 'name'),
    'indexes' => array(
      'all' => array('name', 'collection', 'expire'),
      'expire' => array('expire'),
    ),
  );
  if (!db_table_exists('tempstore')) {
    db_create_table('tempstore', $schema);
  }
  if (db_table_exists('cache_form')) {
    db_drop_table('cache_form');
  }
}

/**
 * Convert the 'filesize' column in {file_managed} to a bigint.
 */
function system_update_1008() {
  $spec = array(
    'description' => 'The size of the file in bytes.',
    'type' => 'int',
    'size' => 'big',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  db_change_field('file_managed', 'filesize', 'filesize', $spec);
}

/**
 * Enable Admin Menu module.
 */
function system_update_1009() {
  update_module_enable(array('admin_bar'));

  // Install default config.
  $config = config('admin_bar.settings');
  $config->set('margin_top', 1);
  $config->set('position_fixed', 0);
  $config->set('components', array(
    'admin_bar.icon',
    'admin_bar.menu',
    'admin_bar.search',
    'admin_bar.users',
    'admin_bar.account',
  ));
  $config->save();

  // Manually install schema, as update_module_enable() does not do this for us.
  if (!db_table_exists('cache_admin_bar')) {
    $cache_admin_bar = backdrop_get_schema_unprocessed('system', 'cache');
    $cache_admin_bar['description'] = 'Cache table for Administration menu to store client-side caching hashes.';
    db_create_table('cache_admin_bar', $cache_admin_bar);
  }
}

/**
 * Remove the registry and registry_file tables.
 */
function system_update_1010() {
  if (db_table_exists('registry')) {
    db_drop_table('registry');
  }
  if (db_table_exists('registry_file')) {
    db_drop_table('registry_file');
  }
}

/**
 * Specify the files directory manually if needed.
 */
function system_update_1011() {
  $file_path = update_variable_get('file_public_path', NULL);
  if (is_null($file_path)) {
    $conf_path = conf_path();
    if ($conf_path != '.') {
      $conf_path = str_replace('./', '', $conf_path);
      update_variable_set('file_public_path', $conf_path . '/files');
    }
    else {
      update_variable_set('file_public_path', 'sites/default/files');
    }
  }
}

/**
 * Convert cron settings to use configuration files.
 */
function system_update_1012() {
  // Migrate the variable settings.
  $config = config('system.core');
  $config->set('cron_threshold_warning', update_variable_get('cron_threshold_warning', 172800));
  $config->set('cron_safe_threshold', update_variable_get('cron_safe_threshold', 10800));
  $config->set('cron_max_threshold', update_variable_get('cron_max_threshold', 10800));
  $config->set('cron_threshold_error', update_variable_get('cron_threshold_error', 1209600));
  $config->save();

  // Delete variables.
  update_variable_del('cron_threshold_warning');
  update_variable_del('cron_safe_threshold');
  update_variable_del('cron_max_threshold');
  update_variable_del('cron_threshold_error');
}

/**
 * Moves site system settings from variable to config.
 */
function system_update_1013() {
  // Set the default variables for the system.site config file.
  $config = config('system.core');
  $config->set('site_name', update_variable_get('site_name', 'Backdrop'));
  $config->set('site_mail', update_variable_get('site_mail', ''));
  $config->set('site_slogan', update_variable_get('site_slogan', ''));
  $config->set('site_frontpage', update_variable_get('site_frontpage', 'node'));
  $config->set('site_403', update_variable_get('site_403', ''));
  $config->set('site_404', update_variable_get('site_404', ''));
  $config->save();
  // Delete variables.
  update_variable_del('site_name');
  update_variable_del('site_mail');
  update_variable_del('site_slogan');
  update_variable_del('site_frontpage');
  update_variable_del('site_403');
  update_variable_del('site_404');
}

/**
 * Move the system maintenance settings from variable to config.
 */
function system_update_1014() {
  // Migrate variables to state and config.
  state_set('maintenance_enabled', update_variable_get('maintenance_mode', 'enabled'));
  config_set('system.core', 'maintenance_mode_message', update_variable_get('maintenance_mode_message', 'message'));

  // Delete variables.
  update_variable_del('maintenance_mode');
  update_variable_del('maintenance_mode_message');
}

/**
 *  Convert RSS publishing settings to use configuration files.
 */
function system_update_1015() {
  // Migrate variables to config.
  $config = config('system.core');
  $config->set('rss_description', update_variable_get('feed_description', ''));
  $config->set('rss_limit', update_variable_get('feed_default_items', 10));
  $config->set('rss_viewmode', update_variable_get('feed_item_length', 'fulltext'));
  $config->save();

  // Delete variables.
  update_variable_del('feed_description');
  update_variable_del('feed_default_items');
  update_variable_del('feed_item_length');
}

/**
 * Moves action_max_stack from variable to config.
 */
function system_update_1016() {
  // Migrate variables to config.
  $config = config('system.core');
  $config->set('action_recursion_limit', update_variable_get('actions_max_stack', 35));
  $config->save();

  // Delete variables.
  update_variable_del('actions_max_stack');
}

/**
 * Moves system logging settings from variables to config.
 */
function system_update_1017() {
  // Migrate variables to config.
  $config = config('system.core');
  $config->set('log_row_limit', update_variable_get('dblog_row_limit', 1000));
  $config->set('log_identity', update_variable_get('syslog_identity', 'backdrop'));
  $config->set('log_facility', update_variable_get('syslog_facility', LOG_LOCAL0));
  $config->set('log_format', update_variable_get('syslog_format', '!base_url|!timestamp|!type|!ip|!request_uri|!referer|!uid|!link|!message'));
  $config->set('error_level', update_variable_get('error_level', 'all'));
  $config->save();

  // Delete variables.
  update_variable_del('error_level');
  update_variable_del('dblog_row_limit');
  update_variable_del('syslog_identity');
  update_variable_del('syslog_facility');
  update_variable_del('syslog_format');
}

/**
 * Moves authorize system settings from variable to config.
 */
function system_update_1018() {
  // Migrate variables to config.
  $config = config('system.authorize');
  $config->set('filetransfer_default', update_variable_get('authorize_filetransfer_default', ''));
  $settings = db_query("SELECT name, value FROM variable WHERE name LIKE 'authorize_filetransfer_connection_settings_%'");
  foreach ($settings as $row)  {
    $row = unserialize($row);
    $config->set('authorize_filetransfer_connection_settings_' . $row[0], $row[1]);
  }
  $config->save();

  // Delete variables.
  update_variable_del('allow_authorize_operations');
  update_variable_del('authorize_filetransfer_default');

}

/**
 * Converts active_menus_default variable to config.
 */
function system_update_1019() {
  // Migrate variables to config.
  $config = config('system.core');
  $config->set('active_menus_default', update_variable_get('menu_default_active_menus', array()));
  $config->save();

  // Delete variables.
  update_variable_del('menu_default_active_menus');
}

/**
 * Convert date settings to config.
 */
function system_update_1020() {
  // Safety check for date formats.
  if (!db_table_exists('date_format_type')) {
    return;
  }

  // Migrate variables if any.
  $config = config('system.date');
  $config->set('first_day', update_variable_get('date_first_day', 0));
  $config->set('default_country', update_variable_get('site_default_country', ''));
  $config->set('default_timezone', update_variable_get('date_default_timezone', ''));
  $config->set('user_configurable_timezones', update_variable_get('configurable_timezones', 1));
  $config->set('user_empty_timezone_message', update_variable_get('empty_timezone_message', 0));
  $config->set('user_default_timezone', update_variable_get('user_default_timezone', 0));

  // Delete variables.
  update_variable_del('site_default_country');
  update_variable_del('date_first_day');
  update_variable_del('date_default_timezone');
  update_variable_del('configurable_timezones');
  update_variable_del('empty_timezone_message');
  update_variable_del('user_default_timezone');

  // Migrate date formats. These are the defaults that must exist.
  $formats = array(
    'long' => array(
      'label' => 'Default Long Date',
      'pattern' => 'l, F j, Y - H:i',
      'module' => 'system',
    ),
    'medium' => array(
      'label' => 'Default Medium Date',
      'pattern' => 'D, m/d/Y - H:i',
      'module' => 'system',
    ),
    'short' => array(
      'label' => 'Default Short Date',
      'pattern' => 'm/d/Y - H:i',
      'module' => 'system',
    ),
    'html_datetime' => array(
      'label' => 'HTML Datetime',
      'pattern' => 'Y-m-d\\TH:i:sO',
      'module' => 'system',
      'hidden' => 1,
    ),
    'html_date' => array(
      'label' => 'HTML Date',
      'pattern' => 'Y-m-d',
      'module' => 'system',
      'hidden' => 1
    ),
    'html_time' => array(
      'label' => 'HTML Time',
      'pattern' => 'H:i:s',
      'module' => 'system',
      'hidden' => 1,
    ),
    'html_yearless_date' => array(
      'label' => 'HTML Yearless date',
      'pattern' => 'm-d',
      'module' => 'system',
      'hidden' => 1,
    ),
    'html_week' => array(
      'label' => 'HTML Week',
      'pattern' => 'Y-\\WW',
      'module' => 'system',
      'hidden' => 1,
    ),
    'html_month' => array(
      'label' => 'HTML Month',
      'pattern' => 'Y-m',
      'module' => 'system',
      'hidden' => 1,
    ),
    'html_year' => array(
      'label' => 'HTML Year',
      'pattern' => 'Y',
      'module' => 'system',
      'hidden' => 1,
    ),
  );

  // Update/create custom formats.
  $result = db_query("SELECT * FROM {date_format_type}");
  foreach ($result as $row) {
    if ($pattern = update_variable_get('date_format_' . $row->type)) {
      $format = isset($formats[$row->type]) ? $formats[$row->type] : array();
      $format['label'] = $row->title;
      $format['pattern'] = $pattern;
      $formats[$row->type] = $format;
      update_variable_del('date_format_' . $row->type);
    }
  }

  // Copy over all locale-specific patterns for each date format.
  $locale_result = db_query("SELECT * FROM {date_format_locale}");
  foreach ($locale_result as $row) {
    if (array_key_exists($row->type, $formats)) {
      $formats[$row->type]['locales'][$row->language] = $row->format;
    }
  }

  $config->set('formats', $formats);
  $config->save();

  db_drop_table('date_formats');
  db_drop_table('date_format_type');
  db_drop_table('date_format_locale');
}

/**
 * Removes the js_cache_files variable.
 */
function system_update_1021() {
  update_variable_del('js_cache_files');
}

/**
 * Converts theme logo and shortcut settings to site-wide config.
 */
function system_update_1022() {
  // Update to set the defaults.
  $config = config('system.core');
  $config->set('site_logo_theme', 1);
  $config->set('site_logo_path', '');
  $config->set('site_favicon_theme', 1);
  $config->set('site_favicon_path', 'core/misc/favicon.ico');
  $config->set('site_favicon_mimetype', 'image/vnd.microsoft.icon');

  $settings = update_variable_get('theme_settings');

  // Copy over logo settings.
  if (!empty($settings['toggle_logo'])) {
    $config->set('site_logo_theme', $settings['default_logo']);
    if (is_file($settings['logo_path'])) {
      $config->set('site_favicon_path', $settings['logo_path']);
      $config->set('site_favicon_mimetype', file_get_mimetype($settings['logo_path']));
    }
  }

  // Copy over favicon settings.
  if (!empty($settings['toggle_favicon'])) {
    $config->set('site_favicon_theme', $settings['default_favicon']);
    if (is_file($settings['favicon_path'])) {
      $config->set('site_favicon_path', $settings['favicon_path']);
    }
  }
}

/**
 * Enable admin_bar, replacing the renamed admin_menu.
 */
function system_update_1023() {
  // This update is no longer necessary and has been removed.
}

/**
 * Consolidate common config files into "system.core".
 */
function system_update_1024() {
  // This update only affects HEAD2HEAD upgrades, as system.core is used in all
  // previous updates instead of the old files names updated here.
  $core_config = config('system.core');
  if (!$core_config->isNew()) {
    return;
  }

  $files_to_upgrade = array(
    'system.site',
    'system.rss',
    'system.performance',
    'system.menu',
    'system.maintenance',
    'system.logging',
    'system.cron',
    'user.settings',
  );

  $combined_data = array();
  foreach ($files_to_upgrade as $file) {
    $config = config($file);
    if ($config_data = $config->get()) {
      $combined_data = array_merge($combined_data, $config_data);
    }
    $config->delete();
  }
  $combined_data['_config_name'] = 'system.core';
  $combined_data['_config_static'] = TRUE;
  ksort($combined_data);

  $core_config->setData($combined_data);
  $core_config->save();
}

/**
 * Convert block positioning and configuration to the default layout.
 */
function system_update_1025() {
  update_module_enable(array('layout'));

  // Manually install schema, as update_module_enable() does not do this for us.
  if (!db_table_exists('cache_layout_path')) {
    $cache_table = backdrop_get_schema_unprocessed('system', 'cache');
    $cache_table['description'] = 'Cache table to store which layouts are active at a given path.';
    db_create_table('cache_layout_path', $cache_table);
  }

  $admin_layout = array(
    'path' => NULL,
    'name' => 'admin_default',
    'title' => 'Default Administrative Layout',
    'description' => NULL,
    'module' => 'layout',
    'weight' => 1,
    'layout' => 'one_column',
    'settings' => array(),
    'positions' => array(
      'content' => array(
        'default',
      ),
      'top' => array(
        '55f542fe-0763-453b-ba3e-62677ea559e5'
      ),
    ),
    'content' => array(
      '55f542fe-0763-453b-ba3e-62677ea559e5' => array(
        'plugin' => 'system:breadcrumb',
        'data' => array(
          'module' => 'system',
          'delta' => 'breadcrumb',
        ),
        'uuid' => '55f542fe-0763-453b-ba3e-62677ea559e5',
      ),
      'default' => array(
        'plugin' => 'system:main',
        'data' => array(
          'module' => 'system',
          'delta' => 'main',
        ),
        'uuid' => 'default',
      ),
    ),
  );
  $admin_config = config('layout.layout.admin_default');
  $admin_config->setData($admin_layout);
  $admin_config->save();

  $layout_name = state_get('upgrade_layout_name', 'three_three_four_column');

  $default_layout = array(
    'path' => NULL,
    'name' => 'default',
    'title' => 'Default Layout',
    'description' => NULL,
    'module' => 'layout',
    'weight' => 0,
    'layout' => $layout_name,
    'settings' => array(),
    'positions' => array(
      'header' => array(
        '84c43df4-1165-4faf-8700-c362a7153c0b',
        '13b2f325-af26-40bb-8c61-97fe1d93f19f',
      ),
      'content' => array(
        'default',
      ),
      'footer' => array(
        'cd4d033d-3f67-4191-8655-85ee758877c0',
      ),
      'sidebar' => array(
        'b7efc039-1518-4331-9808-8e5060a3caed',
      ),
      'top' => array(
        '09f11b4e-877e-45ab-9000-a4c6254faa04'
      ),
    ),
    'content' => array(
      '84c43df4-1165-4faf-8700-c362a7153c0b' => array(
      'plugin' => 'system:header',
        'data' => array(
          'module' => 'system',
          'delta' => 'header',
          'settings' => array(),
          'uuid' => '84c43df4-1165-4faf-8700-c362a7153c0b',
        ),
      ),
      '13b2f325-af26-40bb-8c61-97fe1d93f19f' => array(
        'plugin' => 'system:main-menu',
        'data' => array(
          'module' => 'system',
          'delta' => 'main-menu',
          'uuid' => '13b2f325-af26-40bb-8c61-97fe1d93f19f',
          'settings' => array(
            'title_display' => 'none',
          ),
        ),
      ),
      '09f11b4e-877e-45ab-9000-a4c6254faa04' => array(
        'plugin' => 'system:breadcrumb',
        'data' => array(
          'module' => 'system',
          'delta' => 'breadcrumb',
          'uuid' => '09f11b4e-877e-45ab-9000-a4c6254faa04',
        ),
      ),
      'default' => array(
        'plugin' => 'system:main',
        'data' => array(
          'module' => 'system',
          'delta' => 'main',
          'uuid' => 'default',
        ),
      ),
      'b7efc039-1518-4331-9808-8e5060a3caed' => array(
        'plugin' => 'user:login',
        'data' => array(
          'module' => 'user',
          'delta' => 'login',
          'uuid' => 'b7efc039-1518-4331-9808-8e5060a3caed',
        ),
      )
    ),
  );

  $current_theme = update_variable_get('theme_default', 'bartik');

  // Load the default layout to prepare copying blocks into it.
  $layout_regions = state_get('upgrade_layout_regions', array(
    'header' => 'header',
    'top' => 'top',
    'content' => 'content',
    'sidebar_first' => 'sidebar_first',
    'sidebar_second' => 'sidebar_second',
    'triptych_first' => 'triptych_first',
    'triptych_middle' => 'triptych_middle',
    'triptych_last' => 'triptych_last',
    'footer_firstcolumn' => 'footer_firstcolumn',
    'footer_secondcolumn' => 'footer_secondcolumn',
    'footer_thirdcolumn' => 'footer_thirdcolumn',
    'footer_fourthcolumn' => 'footer_fourthcolumn',
    'footer' => 'footer',
  ));
  $default_layout['layout'] = $layout_name;

  // Prepare a node-specific layout to be used if necessary.
  $node_layout = $default_layout;
  $node_layout['title'] = t('Node layout');
  $node_layout['name'] = 'node';
  $node_layout['path'] = 'node/%';
  unset($node_layout['module']);
  $node_layout_required = FALSE;

  $result = db_query("SELECT * FROM {block} WHERE theme = :theme AND status = 1 AND NOT (module = 'system' AND delta = 'main') ORDER BY region, weight", array(':theme' => $current_theme));
  foreach ($result as $block_row) {
    if (array_key_exists($block_row->region, $layout_regions)) {
      $region = $layout_regions[$block_row->region];
      $is_node_block = FALSE;

      // Create a new layout block object.
      $uuid = new Uuid();
      $block_uuid = $uuid->generate();
      $block_config = array(
        'plugin' => $block_row->module . ':' . $block_row->delta,
        'data' => array(
          'module' => $block_row->module,
          'delta' => $block_row->delta,
          'uuid' => $block_uuid,
          'conditions' => array(),
        ),
      );

      // Add any path restrictions, excluding PHP visibility rules.
      $pages = trim($block_row->pages);
      $visibility = (int) $block_row->visibility;
      if ($pages && $visibility !== 2) {
        $settings = array(
          'paths' => $pages,
          'visibility_setting' => $visibility,
        );
        $access_config = array(
          'plugin' => 'path',
          'data' => array(
            'settings' => $settings,
          ),
        );
        $block_config['data']['conditions'][] = $access_config;
      }

      // Add any role restrictions.
      if (db_table_exists('block_role')) {
        $role_result = db_query("SELECT * FROM {block_role} WHERE module = :module AND delta = :delta", array(':module' => $block_row->module, ':delta' => $block_row->delta));
        $roles = array();
        foreach ($role_result as $role_row) {
          switch ($role_row->rid) {
            case 1:
              $roles[] = 'anonymous';
              break;
            case 2:
              $roles[] = 'authenticated';
              break;
            default:
              $roles[] = $role_row->rid;
          }
        }
        if ($roles) {
          $settings = array('roles' => $roles);
          $access_config = array(
            'plugin' => 'user_role',
            'data' => array(
              'settings' => $settings,
            ),
          );
          $block_config['data']['conditions'][] = $access_config;
        }
      }

      // Add any node type restrictions.
      if (db_table_exists('block_node_type')) {
        $type_result = db_query("SELECT * FROM {block_node_type} WHERE module = :module AND delta = :delta", array(':module' => $block_row->module, ':delta' => $block_row->delta));
        $types = array();
        foreach ($type_result as $type_row) {
          $types[] = $type_row->type;
          $node_layout_required = TRUE;
          $is_node_block = TRUE;
        }
        if ($types) {
          $settings = array('bundles' => $types);
          $access_config = array(
            'plugin' => 'node:bundle',
            'data' => array(
              'settings' => $settings,
            ),
          );
          $block_config['data']['conditions'][] = $access_config;
        }
      }

      // Position the block in the default layout if not node-type specific.
      if (!$is_node_block) {
        $default_layout['positions'][$region][] = $block_uuid;
        $default_layout['content'][$block_uuid] = $block_config;
      }

      // Position the block in the node layout.
      $node_layout['positions'][$region][] = $block_uuid;
      $node_layout['content'][$block_uuid] = $block_config;
    }
  }

  // Save the layout with the migrated blocks in position.
  $layout_config = config('layout.layout.default');
  $layout_config->setData($default_layout);
  $layout_config->save();

  // If any node-specific blocks were found, save the node layout as well.
  if ($node_layout_required) {
    $layout_config = config('layout.layout.node');
    $layout_config->setData($node_layout);
    $layout_config->save();
  }

  // Set layout as the default route handler.
  config_set('system.core', 'menu_route_handler', 'layout_route_handler');
}

/**
 * Convert file system, clean URL, profile, and theme variables to config.
 */
function system_update_1026() {
  $config = config('system.core');
  $config->set('file_default_scheme', update_variable_get('file_default_scheme', 'public'));
  $config->set('file_public_path', update_variable_get('file_public_path', 'files'));
  $config->set('file_temporary_path', update_variable_get('file_temporary_path', ''));
  $config->set('file_private_path', update_variable_get('file_private_path', ''));
  $config->set('image_jpeg_quality', update_variable_get('image_jpeg_quality', 75));
  $config->set('install_profile', update_variable_get('install_profile', 'standard'));
  $config->set('clean_url', update_variable_get('clean_url', 0));
  $config->set('theme_default', update_variable_get('theme_default', 'stark'));
  $config->set('admin_theme', update_variable_get('admin_theme', ''));
  $config->set('node_admin_theme', update_variable_get('node_admin_theme', ''));
  $config->save();

  // Delete variables.
  update_variable_del('file_default_scheme');
  update_variable_del('file_public_path');
  update_variable_del('file_temporary_path');
  update_variable_del('file_private_path');
  update_variable_del('install_profile');
  update_variable_del('clean_url');
  update_variable_del('theme_default');
  update_variable_del('admin_theme');
  update_variable_del('node_admin_theme');
  update_variable_del('image_jpeg_quality');

  // These variables have been converted to settings:
  update_variable_del('css_gzip_compression');
  update_variable_del('js_gzip_compression');

  // And these variables have been converted to state:
  update_variable_del('javascript_parsed');
}

/**
 * Remove the per-user cache column from the session table.
 */
function system_update_1027() {
  if (db_field_exists('sessions', 'cache')) {
    db_drop_field('sessions', 'cache');
  }

  $config = config('system.core');
  $config->clear('cache_lifetime');
  $config->save();
}

/**
 * Convert filter fallback and user cancellation method variables to config.
 */
function system_update_1028() {
  $config = config('system.core');
  $config->set('filter_fallback_format', update_variable_get('filter_fallback_format', 'plain_text'));
  $config->set('user_cancel_method', update_variable_get('user_cancel_method', 'user_cancel_block'));
  $config->save();

  update_variable_del('filter_fallback_format');
  update_variable_del('user_cancel_method');
}

/**
 * Convert config sync size to config.
 */
function system_update_1029() {
  $config = config('system.core');
  $config->set('config_sync_batch_size', update_variable_get('config_sync_batch_size', 20));
  $config->set('default_nodes_main', update_variable_get('default_nodes_main', 10));
  $config->save();
}

/**
 * Convert mail system variable to config.
 */
function system_update_1030() {
  $config = config('system.mail');
  $config->setData(update_variable_get('mail_system', array('default-system' => 'DefaultMailSystem')));
  $config->save();
  update_variable_del('mail_system');
}

/**
 * Drop the actions table, no longer used by Backdrop.
 */
function system_update_1031() {
  // The actions UI and table were removed in Backdrop. Module-provided actions
  // may still be defined through hook_action_info(), including potentially
  // configurable actions, but core no longer attempts to manage them directly.
  if (db_table_exists('actions')) {
    db_drop_table('actions');
  }

  // Actions had been given it's own config file, now it is part of system.core.
  $action_config = config('system.action');
  if (!$action_config->isNew()) {
    $config = config('system.core');
    $config->set('action_recursion_limit', $action_config->get('action_recursion_limit'));
    $config->save();
    $action_config->delete();
  }
}

/**
 * Enable config module.
 */
function system_update_1032() {
  update_module_enable(array('config'));
}

/**
 * Set the minimum page cache lifetime to 5 minutes by default.
 */
function system_update_1033() {
  $config = config('system.core');
  if ($config->get('page_cache_maximum_age') == 0) {
    $config->set('page_cache_maximum_age', 300);
    $config->save();
  }
}

/**
 * Set the theme_debug flag to FALSE.
 */
function system_update_1034() {
  config_set('system.core', 'theme_debug', FALSE);
}

/**
 * Set the weight of Layout module to run last.
 */
function system_update_1035() {
  // This is in system module because Layout module was enabled earlier in the
  // upgrade path from D7. If it is in layout.install, it requires that
  // update.php be run twice when doing an upgrade.
  db_query("UPDATE {system} SET weight = 60 WHERE name = 'layout' AND type = 'module'");
}

/**
 * Remove the private key from configuration.
 */
function system_update_1036() {
  // A new private key is generated automatically by backdrop_get_private_key().
  $config = config('system.core');
  $config->clear('private_key');
  $config->save();
}

/**
 * @} End of "defgroup updates-7.x-to-1.x"
 * The next series of updates should start at 2000.
 */
