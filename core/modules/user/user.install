<?php

/**
 * @file
 * Install, update and uninstall functions for the user module.
 */

/**
 * Implements hook_schema().
 */
function user_schema() {
  $schema['role_permission'] = array(
    'description' => 'Stores the permissions assigned to user roles.',
    'fields' => array(
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Foreign Key: {role}.rid.',
      ),
      'permission' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'A single permission granted to the role identified by rid.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The module declaring the permission.",
      ),
    ),
    'primary key' => array('rid', 'permission'),
    'indexes' => array(
      'permission' => array('permission'),
    ),
    'foreign keys' => array(
      'role' => array(
        'table' => 'roles',
        'columns' => array('rid' => 'rid'),
      ),
    ),
  );

  $schema['role'] = array(
    'description' => 'Stores user roles.',
    'fields' => array(
      'rid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique role ID.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique role name.',
        'translatable' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this role in listings and the user interface.',
      ),
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('rid'),
    'indexes' => array(
      'name_weight' => array('name', 'weight'),
    ),
  );

  // The table name here is plural, despite Backdrop table naming standards,
  // because "user" is a reserved word in many databases.
  $schema['users'] = array(
    'description' => 'Stores user data.',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique user ID.',
        'default' => 0,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique user name.',
      ),
      'pass' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's password (hashed).",
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => "User's e-mail address.",
      ),
      'signature' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's signature.",
      ),
      'signature_format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The {filter_format}.format of the signature.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when user was created.',
      ),
      'access' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for previous time user accessed the site.',
      ),
      'login' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Timestamp for user's last login.",
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the user is active(1) or blocked(0).',
      ),
      'timezone' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'description' => "User's time zone.",
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's default language.",
      ),
      'picture' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Foreign key: {file_managed}.fid of user's picture.",
      ),
      'init' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => 'E-mail address used for initial account creation.',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Backdrop.',
      ),
    ),
    'indexes' => array(
      'access' => array('access'),
      'created' => array('created'),
      'mail' => array('mail'),
      'picture' => array('picture'),
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('uid'),
    'foreign keys' => array(
      'signature_format' => array(
        'table' => 'filter_format',
        'columns' => array('signature_format' => 'format'),
      ),
    ),
  );

  $schema['users_roles'] = array(
    'description' => 'Maps users to roles.',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: {users}.uid for user.',
      ),
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: {role}.rid for role.',
      ),
    ),
    'primary key' => array('uid', 'rid'),
    'indexes' => array(
      'rid' => array('rid'),
    ),
    'foreign keys' => array(
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'role' => array(
        'table' => 'roles',
        'columns' => array('rid' => 'rid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function user_install() {
  // Insert a row for the anonymous user.
  db_insert('users')
    ->fields(array(
      'uid' => 0,
      'name' => '',
      'mail' => '',
    ))
    ->execute();

  // We need some placeholders here as name and mail are uniques and data is
  // presumed to be a serialized array. This will be changed by the settings
  // form in the installer.
  db_insert('users')
    ->fields(array(
      'uid' => 1,
      'name' => 'placeholder-for-uid-1',
      'mail' => 'placeholder-for-uid-1',
      'created' => REQUEST_TIME,
      'status' => 1,
      'data' => NULL,
    ))
    ->execute();

  // Built-in roles.
  $rid_anonymous = db_insert('role')
    ->fields(array('name' => 'anonymous user', 'weight' => 0))
    ->execute();
  $rid_authenticated = db_insert('role')
    ->fields(array('name' => 'authenticated user', 'weight' => 1))
    ->execute();

  // Sanity check to ensure the anonymous and authenticated role IDs are the
  // same as the Backdrop defined constants. In certain situations, this will
  // not be true.
  if ($rid_anonymous != BACKDROP_ANONYMOUS_RID) {
    db_update('role')
      ->fields(array('rid' => BACKDROP_ANONYMOUS_RID))
      ->condition('rid', $rid_anonymous)
      ->execute();
  }
  if ($rid_authenticated != BACKDROP_AUTHENTICATED_RID) {
    db_update('role')
      ->fields(array('rid' => BACKDROP_AUTHENTICATED_RID))
      ->condition('rid', $rid_authenticated)
      ->execute();
  }
}

/**
 * @addtogroup updates-7.x-to-1.x
 * @{
 */

/**
 * The 'Member for' extra field has moved one level up in the array.
 */
function user_update_1000() {
  $settings = field_bundle_settings('user', 'user');
  if (isset($settings['extra_fields']['display']['summary'])) {
    $settings['extra_fields']['display']['member_for'] = $settings['extra_fields']['display']['summary'];
    unset($settings['extra_fields']['display']['summary']);
    field_bundle_settings('user', 'user', $settings);
  }
}

/**
 * Grant "administer account settings" to roles with "administer users."
 */
function user_update_1001() {
  $rids = db_query("SELECT rid FROM {role_permission} WHERE permission = :perm", array(':perm' => 'administer users'))->fetchCol();
  // None found.
  if (empty($rids)) {
    return;
  }
  $insert = db_insert('role_permission')->fields(array('rid', 'permission', 'module'));
  foreach ($rids as $rid) {
    $insert->values(array(
      'rid' => $rid,
      'permission' => 'administer account settings',
      'module' => 'user'
    ));
  }
  $insert->execute();
}

/**
 * Remove the ability for users to select a theme.
 */
function user_update_1002() {
  db_drop_field('users', 'theme');
}

/**
 * Moves account settings from variable to config.
 */
function user_update_1003() {
  // Copy config file to site config folder.
  config_install_default_config('module', 'user.settings');
  // Migrate variables if any.
  $config = config('user.settings');
  $config->set('user_admin_role', variable_get('user_admin_role', ''));
  $config->set('anonymous', variable_get('anonymous', 'Anonymous'));
  $config->set('user_email_verification', variable_get('user_email_verification', 1));
  $config->set('user_mail_status_activated_notify', variable_get('user_mail_status_activated_notify', 1));
  $config->set('user_mail_status_blocked_notify', variable_get('user_mail_status_blocked_notify', 0));
  $config->set('user_mail_status_cancelled_notify', variable_get('user_mail_status_cancelled_notify', 0));
  $config->set('user_signatures', variable_get('user_signatures', 0));
  $config->set('user_password_reset_timeout', variable_get('user_password_reset_timeout', 86400));

  // Convert the user.settings:register numeric value to text value.
  $map = array(
    '0' => 'admin_only',
    '1' => 'visitors',
    '2' => 'visitors_admin_approval',
  );
  $user_register = variable_get('user_register', 2);
  if (isset($map[$user_register])) {
    $config->set('user_register', $map[$user_register])->save();
  }
  $config->save();

  // Delete variables.
  variable_del('anonymous');
  variable_del('user_admin_role');
  variable_del('user_register');
  variable_del('user_signatures');
  variable_del('user_mail_status_activated_notify');
  variable_del('user_mail_status_blocked_notify');
  variable_del('user_mail_status_cancelled_notify');
  variable_del('user_email_verification');
  variable_del('user_password_reset_timeout');
}

/**
 * Moves login flood settings from variable to config.
 */
function user_update_1004() {
  // Copy config file to site config folder.
  config_install_default_config('module', 'user.flood');
  // Migrate variables if any.
  $config = config('user.flood');
  $config->set('flood_uid_only', variable_get('user_failed_login_identifier_uid_only', 'false'));
  $config->set('flood_ip_limit', variable_get('user_failed_login_ip_limit', 50));
  $config->set('flood_ip_window', variable_get('user_failed_login_ip_window', 3600));
  $config->set('flood_user_limit', variable_get('user_failed_login_user_limit', 5));
  $config->set('flood_user_window', variable_get('user_failed_login_user_window', 21600));
  $config->save();
  // Delete variables.
  variable_del('user_failed_login_identifier_uid_only');
  variable_del('user_failed_login_ip_limit');
  variable_del('user_failed_login_ip_window');
  variable_del('user_failed_login_user_limit');
  variable_del('user_failed_login_user_window');
}

/**
 * Moves user mail settings from variable to config.
 */
function user_update_1005() {
  // Copy config file to site config folder.
  config_install_default_config('module', 'user.mail');
  // Migrate variables if any.
  $config = config('user.mail');
  $config->set('register_admin_created_subject', variable_get('register_admin_created_subject', 'An administrator created an account for you at [site:name]'));
  $config->set('register_admin_created_body', variable_get('register_admin_created_body', '[user:name],\n\nA site administrator at [site:name] has created an account for you. You may now log in by clicking this link or copying and pasting it to your browser:\n\n[user:one-time-login-url]\n\nThis link can only be used once to log in and will lead you to a page where you can set your password.\n\nAfter setting your password, you will be able to log in at [site:login-url] in the future using:\n\nusername: [user:name]\npassword: Your password\n\n--  [site:name] team'));
  $config->set('register_pending_approval_subject', variable_get('register_pending_approval_subject', 'Account details for [user:name] at [site:name] (pending admin approval)'));
  $config->set('register_pending_approval_body', variable_get('register_pending_approval_body', '[user:name],\n\nThank you for registering at [site:name]. Your application for an account is currently pending approval. Once it has been approved, you will receive another e-mail containing information about how to log in, set your password, and other details.\n\n\n--  [site:name] team'));
  $config->set('register_no_approval_required_subject', variable_get('register_no_approval_required_subject', 'Account details for [user:name] at [site:name]'));
  $config->set('register_no_approval_required_body', variable_get('register_no_approval_required_body', '[user:name],\n\nThank you for registering at [site:name]. You may now log in by clicking this link or copying and pasting it to your browser:\n\n[user:one-time-login-url]\n\nThis link can only be used once to log in and will lead you to a page where you can set your password.\n\nAfter setting your password, you will be able to log in at [site:login-url] in the future using:\n\nusername: [user:name]\npassword: Your password\n\n--  [site:name] team'));
  $config->set('password_reset_subject', variable_get('password_reset_subject', 'Replacement login information for [user:name] at [site:name]'));
  $config->set('password_reset_body', variable_get('password_reset_body', '[user:name],\n\nA request to reset the password for your account has been made at [site:name].\n\nYou may now log in by clicking this link or copying and pasting it to your browser:\n\n[user:one-time-login-url]\n\nThis link can only be used once to log in and will lead you to a page where you can set your password. It expires after one day and nothing will happen if it is not used.\n\n--  [site:name] team'));
  $config->set('status_activated_subject', variable_get('status_activated_subject', 'Account details for [user:name] at [site:name] (approved)'));
  $config->set('status_activated_body', variable_get('status_activated_body', '[user:name],\n\nYour account at [site:name] has been activated.\n\nYou may now log in by clicking this link or copying and pasting it into your browser:\n\n[user:one-time-login-url]\n\nThis link can only be used once to log in and will lead you to a page where you can set your password.\n\nAfter setting your password, you will be able to log in at [site:login-url] in the future using:\n\nusername: [user:name]\npassword: Your password\n\n--  [site:name] team'));
  $config->set('status_blocked_subject', variable_get('status_blocked_subject', 'Account details for [user:name] at [site:name] (blocked)'));
  $config->set('status_blocked_body', variable_get('status_blocked_body', '[user:name],\n\nYour account on [site:name] has been blocked.\n\n--  [site:name] team'));
  $config->set('cancel_confirm_subject', variable_get('cancel_confirm_subject', 'Account cancellation request for [user:name] at [site:name]'));
  $config->set('cancel_confirm_body', variable_get('cancel_confirm_body', '[user:name],\n\nA request to cancel your account has been made at [site:name].\n\nYou may now cancel your account on [site:url-brief] by clicking this link or copying and pasting it into your browser:\n\n[user:cancel-url]\n\nNOTE: The cancellation of your account is not reversible.\n\nThis link expires in one day and nothing will happen if it is not used.\n\n--  [site:name] team'));
  $config->set('status_canceled_subject', variable_get('status_canceled_subject', 'Account details for [user:name] at [site:name] (canceled)'));
  $config->set('status_canceled_body', variable_get('status_canceled_body', '[user:name],\n\nYour account on [site:name] has been canceled.\n\n--  [site:name] team'));
  $config->save();
  // Delete variables.
  variable_del('register_admin_created_subject');
  variable_del('register_admin_created_body');
  variable_del('register_pending_approval_subject');
  variable_del('register_pending_approval_body');
  variable_del('register_no_approval_required_subject');
  variable_del('register_no_approval_required_body');
  variable_del('password_reset_subject');
  variable_del('password_reset_body');
  variable_del('status_activated_subject');
  variable_del('status_activated_body');
  variable_del('status_blocked_subject');
  variable_del('status_blocked_body');
  variable_del('cancel_confirm_subject');
  variable_del('cancel_confirm_body');
  variable_del('status_canceled_subject');
  variable_del('status_canceled_body');
}

/**
 * Moves user picture settings from variable to config.
 */
function user_update_1006() {
  // Migrate variables if any.
  $config = config('user.settings');
  $config->set('user_pictures', variable_get('user_pictures', 0));
  $config->set('user_picture_path', variable_get('user_picture_path', 'pictures'));
  $config->set('user_picture_default', variable_get('user_picture_default', ''));
  $config->set('user_picture_style', variable_get('user_picture_style', ''));
  $config->set('user_picture_dimensions', variable_get('user_picture_dimensions', '85x85'));
  $config->set('user_picture_file_size', variable_get('user_picture_file_size', 30));
  $config->set('user_picture_guidelines', variable_get('user_picture_guidelines', ''));
  $config->save();
  // Delete variables.
  variable_del('user_pictures');
  variable_del('user_picture_path');
  variable_del('user_picture_default');
  variable_del('user_picture_style');
  variable_del('user_picture_dimensions');
  variable_del('user_picture_file_size');
  variable_del('user_picture_guidelines');
}

/**
 * Set default option for login method to use accounts only.
 */
function user_update_1007() {
  config_set('user.settings', 'user_login_method', USER_LOGIN_USERNAME_ONLY);
}

/**
 * @} End of "addtogroup updates-7.x-to-1.x"
 */
