<?php

/**
 * @file
 * Test file for Field Group UI.
 */

/**
 * Provides common functionality for the Field Group UI test classes.
 */
class GroupTestCase extends BackdropWebTestCase {
  protected $admin_user;

  function setUp() {
    $modules[] = 'node';
    $modules[] = 'field_ui';
    $modules[] = 'field_test';
    $modules[] = 'field_group';
    $modules[] = 'field_group_tests';
    parent::setUp($modules);

    // Create test user.
    $this->admin_user = $this->backdropCreateUser(array('access content', 'administer content types', 'administer fields'));
    $this->backdropLogin($this->admin_user);
  }

}

/**
 * Test the Field Group UI.
 */
class GroupUITestCase extends GroupTestCase {

  function setUp() {
    parent::setUp();
  }

  /**
   * Test the creation a group on the post content type.
   */
  function createGroup() {

    // Create random group name.
    $this->group_label = $this->randomName(8);
    $this->group_name_input = backdrop_strtolower($this->randomName(8));
    $this->group_name = 'group_' . $this->group_name_input;

    // Setup new group.
    $group = array(
      'fields[_add_new_group][label]' => $this->group_label,
      'fields[_add_new_group][group_name]' => $this->group_name_input,
    );
    // Add new group on the 'Manage fields' page.
    $this->backdropPost('admin/structure/types/manage/post/fields', $group, t('Save'));

    $this->assertRaw(t('New group %label successfully created.', array('%label' => $this->group_label)), t('Group message displayed on screen.'));

    // Test if group is in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'form', TRUE);
    $this->assertTrue(array_key_exists($this->group_name, $groups), t('Group found in groups array'));

    // Add new group on the 'Manage display' page.
    $this->backdropPost('admin/structure/types/manage/post/display/default', $group, t('Save'));
    $this->assertRaw(t('New group %label successfully created.', array('%label' => $this->group_label)), t('Group message displayed on screen.'));

    // Test if group is in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->assertTrue(array_key_exists($this->group_name, $groups), t('Group found in groups array'));
  }

  /**
   * Delete a group.
   */
  function deleteGroup() {

    $this->backdropPost('admin/structure/types/manage/post/groups/' . $this->group_name . '/delete/form', array(), t('Delete'));
    $this->assertRaw(t('The group %label has been deleted from the %post content type.', array('%label' => $this->group_label, '%post' => 'Post')), t('Group removal message displayed on screen.'));

    // Test that group is not in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'form', TRUE);
    $this->assertFalse(array_key_exists($this->group_name, $groups), t('Group not found in groups array while deleting'));

    $this->backdropPost('admin/structure/types/manage/post/groups/' . $this->group_name . '/delete/default', array(), t('Delete'));
    $this->assertRaw(t('The group %label has been deleted from the %post content type.', array('%label' => $this->group_label, '%post' => 'Post')), t('Group removal message displayed on screen.'));

    // Test that group is not in the $groups array.
    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->assertFalse(array_key_exists($this->group_name, $groups), t('Group not found in groups array while deleting'));
  }

  /**
   * General CRUD.
   */
  function testCRUDGroup() {
    $this->createGroup();
    $this->deleteGroup();
  }

  /**
   * Nest a field underneath a group.
   */
  function testNestField() {

    $this->createGroup();

    $edit = array(
      'fields[field_image][parent]' => $this->group_name,
    );
    $this->backdropPost('admin/structure/types/manage/post/fields', $edit, t('Save'));
    $this->assertRaw(t('Your settings have been saved.'), t('Settings saved'));

    $groups = field_group_info_groups('node', 'post', 'form', TRUE);
    $this->assertTrue(in_array('field_image', $groups[$this->group_name]->children), t('Image is a child of %group', array('%group' => $this->group_name)));
  }

}

/**
 * Tests the functionality of the 'Manage display' screens.
 */
class GroupDisplayTestCase extends GroupTestCase {
  protected $node;

  function setUp() {
    parent::setUp();

    $node = entity_create('node', array ('type' => 'post'));
    $node->uid = $this->admin_user->uid;
    $node->title = $this->randomName();
    $node->status = 1;

    // Create test fields.
    $test_fields = array('field_test', 'field_test_2', 'field_no_access');
    foreach ($test_fields as $field_name) {

      $field = array(
        'field_name' => $field_name,
        'type' => 'test_field',
        'cardinality' => 1,
      );
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'node',
        'bundle' => 'post',
        'label' => $this->randomName(),
        'display' => array(
          'default' => array(
            'type' => 'field_test_default',
            'settings' => array(
              'test_formatter_setting' => $this->randomName(),
            ),
          ),
          'teaser' => array(
            'type' => 'field_test_default',
            'settings' => array(
              'test_formatter_setting' => $this->randomName(),
            ),
          ),
        ),
      );
      field_create_field($field);
      field_create_instance($instance);

      $node->{$field_name}[LANGUAGE_NONE][0]['value'] = mt_rand(1, 127);
    }

    $node->save();
    $this->node = $node;
  }

  /**
   * Create a new group.
   * @param array $data
   *   Data for the field group.
   */
  function createDisplayGroup($mode, array $data) {

    $group_name = 'group_' . backdrop_strtolower($this->randomName(8));

    $field_group = new stdClass;
    $field_group->group_name = $group_name;
    $field_group->entity_type = 'node';
    $field_group->bundle = 'post';
    $field_group->mode = $mode;
    $field_group->parent_name = '';
    $field_group->children = $data['children'];
    $field_group->label = $data['label'];
    $field_group->weight = $data['weight'];
    $field_group->format_type = $data['format_type'];
    $field_group->format_settings = $data['format_settings'];
    field_group_group_save($field_group);

    return $field_group;
  }

  /**
   * Test if an empty formatter.
   */
  function testFieldAccess() {

    $data = array(
      'label' => 'Wrapper',
      'weight' => '1',
      'children' => array(
        0 => 'field_no_access',
      ),
      'format_type' => 'div',
      'format_settings' => array(
        'label' => 'Link',
        'instance_settings' => array(
          'required_fields' => 0,
          'id' => 'wrapper-id',
          'classes' => 'test-class',
          'description' => '',
          'show_label' => FALSE,
          'label_element' => 'h3',
          'effect' => 'blind',
          'speed' => 'fast',
        ),
        'formatter' => 'open',
      ),
    );
    $group = $this->createDisplayGroup('default', $data);

    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->backdropGet('node/' . $this->node->nid);

    // Test if group is not shown.
    $this->assertNoFieldByXPath("//div[contains(@id, 'wrapper-id')]", NULL, t('Div that contains fields with no access is not shown.'));
  }

  /**
   * Test the div formatter.
   */
  function testDiv() {

    $data = array(
      'label' => 'Wrapper',
      'weight' => '1',
      'children' => array(
        0 => 'field_test',
      ),
      'format_type' => 'div',
      'format_settings' => array(
        'label' => 'Link',
        'instance_settings' => array(
          'required_fields' => 0,
          'id' => 'wrapper-id',
          'classes' => 'test-class',
          'description' => '',
          'show_label' => 0,
          'label_element' => 'h3',
          'effect' => 'blind',
          'speed' => 'fast',
        ),
        'formatter' => 'open',
      ),
    );
    $group = $this->createDisplayGroup('default', $data);

    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->backdropGet('node/' . $this->node->nid);

    // Test group ids and classes.
    $this->assertFieldByXPath("//div[contains(@id, 'wrapper-id')]", NULL, t('Wrapper id set on wrapper div'));
    $this->assertFieldByXPath("//div[contains(@class, 'test-class')]", NULL, t('Test class set on wrapper div') . 'class="' . $group->group_name . ' test-class');

    // Test group label.
    $this->assertNoRaw('<h3><span>' . $data['label'] . '</span></h3>', t('Label is not shown'));

    // Set show label to true.
    $group->format_settings['instance_settings']['show_label'] = 1;

    //backdrop_write_record('field_group', $group, array('identifier'));
    field_group_group_save($group, FALSE);
    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->backdropGet('node/' . $this->node->nid);
    $this->assertRaw('<h3><span>' . $data['label'] . '</span></h3>', t('Label is shown'));

    // Change to collapsible
    $group->format_settings['formatter'] = 'collapsible';
    //backdrop_write_record('field_group', $group, array('identifier'));
    field_group_group_save($group, FALSE);
    $groups = field_group_info_groups('node', 'post', 'default', TRUE);
    $this->backdropGet('node/' . $this->node->nid);
    $this->assertFieldByXPath("//div[contains(@class, 'speed-fast')]", NULL, t('Speed class is set'));
    $this->assertFieldByXPath("//div[contains(@class, 'effect-blind')]", NULL, t('Effect class is set'));
  }

  /**
   * Test the horizontal tabs formatter.
   */
  function testHorizontalTabs() {

    $data = array(
      'label' => 'Tab 1',
      'weight' => '1',
      'children' => array(
        0 => 'field_test',
      ),
      'format_type' => 'htab',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class',
          'description' => '',
        ),
        'formatter' => 'open',
      ),
    );
    $first_tab = $this->createDisplayGroup('default', $data);

    $data = array(
      'label' => 'Tab 2',
      'weight' => '1',
      'children' => array(
        0 => 'field_test_2',
      ),
      'format_type' => 'htab',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class-2',
          'description' => 'description of second tab',
        ),
        'formatter' => 'closed',
      ),
    );
    $second_tab = $this->createDisplayGroup('default', $data);

    $data = array(
      'label' => 'Tabs',
      'weight' => '1',
      'children' => array(
        0 => $first_tab->group_name,
        1 => $second_tab->group_name,
      ),
      'format_type' => 'htabs',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class-wrapper',
        ),
      ),
    );
    $tabs = $this->createDisplayGroup('default', $data);

    $groups = field_group_info_groups('node', 'post', 'default', TRUE);

    $this->backdropGet('node/' . $this->node->nid);

    // Test properties.
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]", NULL, t('Test class set on tabs wrapper'));
    $this->assertFieldByXPath("//fieldset[contains(@class, 'test-class-2')]", NULL, t('Test class set on second tab'));
    $this->assertRaw('<div class="fieldset-description">description of second tab</div>', t('Description of tab is shown'));
    $this->assertRaw('class="collapsible collapsed test-class-2', t('Second tab is default collapsed'));

    // Test if correctly nested
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]//fieldset[contains(@class, 'test-class')]", NULL, 'First tab is displayed as child of the wrapper.');
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]//fieldset[contains(@class, 'test-class-2')]", NULL, 'Second tab is displayed as child of the wrapper.');

  }

  /**
   * Test the vertical tabs formatter.
   */
  function testVerticalTabs() {

    $data = array(
      'label' => 'Tab 1',
      'weight' => '1',
      'children' => array(
        0 => 'field_test',
      ),
      'format_type' => 'tab',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class',
          'description' => '',
        ),
        'formatter' => 'open',
      ),
    );
    $first_tab = $this->createDisplayGroup('default', $data);
    $first_tab_id = 'edit-' . $first_tab->group_name;

    $data = array(
      'label' => 'Tab 2',
      'weight' => '1',
      'children' => array(
        0 => 'field_test_2',
      ),
      'format_type' => 'tab',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class-2',
          'description' => 'description of second tab',
        ),
        'formatter' => 'closed',
      ),
    );
    $second_tab = $this->createDisplayGroup('default', $data);
    $second_tab_id = 'edit-' . $second_tab->group_name;

    $data = array(
      'label' => 'Tabs',
      'weight' => '1',
      'children' => array(
        0 => $first_tab->group_name,
        1 => $second_tab->group_name,
      ),
      'format_type' => 'tabs',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class-wrapper',
        ),
      ),
    );
    $tabs = $this->createDisplayGroup('default', $data);

    $groups = field_group_info_groups('node', 'post', 'default', TRUE);

    $this->backdropGet('node/' . $this->node->nid);

    // Test properties.
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]", NULL, t('Test class set on tabs wrapper'));
    $this->assertFieldByXPath("//fieldset[contains(@class, 'test-class-2')]", NULL, t('Test class set on second tab'));
    $this->assertRaw('<div class="fieldset-description">description of second tab</div>', t('Description of tab is shown'));
    $this->assertRaw('class="collapsible collapsed test-class-2', t('Second tab is default collapsed'));

    // Test if correctly nested
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]//fieldset[contains(@id, '$first_tab_id')]", NULL, 'First tab is displayed as child of the wrapper.');
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]//fieldset[contains(@id, '$second_tab_id')]", NULL, 'Second tab is displayed as child of the wrapper.');
  }

  /**
   * Test the accordion formatter.
   */
  function testAccordion() {

    $data = array(
      'label' => 'Accordion item 1',
      'weight' => '1',
      'children' => array(
        0 => 'field_test',
      ),
      'format_type' => 'accordion-item',
      'format_settings' => array(
        'label' => 'Accordion item 1',
        'instance_settings' => array(
          'classes' => 'test-class',
        ),
        'formatter' => 'closed',
      ),
    );
    $first_item = $this->createDisplayGroup('default', $data);
    $first_item_id = 'node_post_full_' . $first_item->group_name;

    $data = array(
      'label' => 'Accordion item 2',
      'weight' => '1',
      'children' => array(
        0 => 'field_test_2',
      ),
      'format_type' => 'accordion-item',
      'format_settings' => array(
        'label' => 'Tab 2',
        'instance_settings' => array(
          'classes' => 'test-class-2',
        ),
        'formatter' => 'open',
      ),
    );
    $second_item = $this->createDisplayGroup('default', $data);
    $second_item_id = 'node_post_full_' . $second_item->group_name;

    $data = array(
      'label' => 'Accordion',
      'weight' => '1',
      'children' => array(
        0 => $first_item->group_name,
        1 => $second_item->group_name,
      ),
      'format_type' => 'accordion',
      'format_settings' => array(
        'label' => 'Tab 1',
        'instance_settings' => array(
          'classes' => 'test-class-wrapper',
          'effect' => 'bounceslide'
        ),
      ),
    );
    $accordion = $this->createDisplayGroup('default', $data);

    $groups = field_group_info_groups('node', 'post', 'default', TRUE);

    $this->backdropGet('node/' . $this->node->nid);

    // Test properties.
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]", NULL, t('Test class set on tabs wrapper'));
    $this->assertFieldByXPath("//div[contains(@class, 'effect-bounceslide')]", NULL, t('Correct effect is set on the accordion'));
    $this->assertFieldByXPath("//div[contains(@class, 'test-class')]", NULL, t('Accordion item with test-class is shown'));
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-2')]", NULL, t('Accordion item with test-class-2 is shown'));
    $this->assertFieldByXPath("//h3[contains(@class, 'field-group-accordion-active')]", NULL, t('Accordion item 2 was set active'));

    // Test if correctly nested
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]//div[contains(@class, 'test-class')]", NULL, 'First item is displayed as child of the wrapper.');
    $this->assertFieldByXPath("//div[contains(@class, 'test-class-wrapper')]//div[contains(@class, 'test-class-2')]", NULL, 'Second item is displayed as child of the wrapper.');
  }

}
